TODO:
  - 4 total hula girl scenes: 
    (1) existing weld
    (2) weld+rotational+prismatic+distance
    (3) multi-weld to resemble a "2D spring"
  - scene settings to adjust springs, mass of top body, mass of spring components
  - diagnose auto-wobble issue on alternate hula scenes

  - pan / zoom : see RUBEDemo project - BasicRUBELayer::onTouchesMoved
    - need icons + supporting flags

  - rotation: see CCNode.h/.cpp - setRotation()
    - need standalone test scene

----------
Friday 2019-09-20

  STOPWATCH: 


  WOBBLE PROJECT

    - prevent touch with "touchable" RUBE custom property defined on box2d bodies
      - hopefully useful on some box2d bodies (ie. spring components parts with a body/fixture)


    - RUBEScene.cpp move some function variables to module-level for minute performance gain(?) -- especially those repeatedly called each frame


    * added UserData to each box2d body as a reference back to it's image_info item


    prevent gyro/acceleration effects with "ethereal" RUBE property defined on box2d bodies


    after creating the "Ethereal" test with 2 side-by-side box2d (almost duplicate) assemblies, I noticed that they didn't respond to sensor feedback..
      - after some digging, it's because neither assembly had images associated with them
      - in trying to figure out how to resolve this, this actually might work out for the best..
        
        - the CODE ACTUALLY NEEDS A LIST OF BOX2D BODIES IN THE "WORLD" with 
          
          (1) the DEFAULT BOX2D METHOD FOR ITERATING THROUGH THE BODY LIST DOESN'T WORK (due to a bug? as mentioned in a previous journal entry)
          (2) STRUCT_RUBE_IMAGE_INFO, which is currently being used only contains standalone IMAGES and IMAGE-BODY entries, but not standalone BODIES

        * b2dJson.h/.cpp NEEDS A NEW METHOD TO CREATE A VALID LIST OF ALL BOX2D BODIES


    copied the simple bobble RUBE file to experiment with custom properties; added a duplicate assembly..

      - add the "ethereal" property to bodies defined in RUBE - undefined, true, false
        - probably best in the RUBELayer::STRUCT_RUBE_IMAGE_INFO

      - also added "content_size" vec2 - Width and Height
        - store as a b2Vec2 variable

      - these need to be retrieved in the override version of afterLoadProcessing
        
        => RUBE box2d body "ethereal" custom user property:
          json->getCustomBool(body_bobble_B, "ethereal", false);

        => RUBE box2d world "Content" custom user property:
          json->getCustomVector(_world, "content_size", b2Vec2_zero);


    user data vs custom properties
      - USER DATA IS BOX2D-SPECIFIC and useful in c++ code; discussed in an earlier book tutorial
      - CUSTOM PROPERTIES IS RUBE-SPECIFIC..

    menu
      - moved the flower just to get it out of the way for more entries
      * this menu scene is temporary ATM and will be re-made from scratch
        - do take a look at the unniedoll-apps re: scenes

----------
Thursday 2019-09-19

  STOPWATCH: 2:18


  WOBBLE PROJECT

    COMMENT: while editing the RUBE scenes I noticed that the NAMES ARE OFTEN DUPLICATED FOR THE VARIOUS PHYSICS ASSEMBLIES. while this is ok right now, it might be an issue later if importing more than one RUBE scene into the same world (multiple dashboard toys in a scene). it might be worth having a name convention maybe a prefix/suffix combo

      ie.
        hang loose ==> HL{0-9|a-z|A-Z}
        hula girl ==> HG0, HG1, ... HG0_body_base, HG0_joint_weld


    "pseudo-spring physics assembly" (version 2)
      - rotational oscillation
        - (1) weld joint: rotational wobble
        - (1) rotational joint: angle limits

      - straight oscillation
        - (1) prismatic joint: limits along a single axis
        - (1) distance joint: oscillation

    "pseudo-spring physics assembly" (version 3)
      - basically the very similar to v1, but with 4 weld joints


    * I'm noticing that AUTO-WOBBLE ISN'T WORKING at all for none except the original single-weld joint

----------
Wednesday 2019-09-18

  STOPWATCH: 7:15


  WOBBLE PROJECT

    - hula girl using "pseudo-spring physics assembly" scene created separately of the pure weld joint 
      - testing on the device results in strange behavior due to multiple reasons
        - body / "spring" joint mass
        - delicate joint frequency settings
        - overly sensitive torque response (even scaled to minimum)
        - accelerometer had to be scaled up to max 5x to work
        - extremly strange auto-wobble response using either torque or force

      * PERHAPS REDUCING THE # JOINT LEVELS BY 1? CURRENTLY AT 3 LEVELS, BUT WITH 6 WELD JOINTS
        - OR MODIFYING THE ASSEMBLY A LITTLE MORE..

    - modified "acceleration + gravity mode" to use linear acceleration below acc_x threshold AND adding the combine x/z option as it seems to work well when enabled
  
    - combined x/y/z instead of just x/z for better response for bumps in the road


    TODO: icon idea: use multiple combined cog gears to symbolize "advanced" and to access "scene setting (simplified)"
      - scene settings (advanced) would be the next accessible via a button


    - surfing graphic:

      NEED:
        - 1+ animated wave graphics
        - 1+ surfer poses

      - watched some youtube videos for ideas

      * https://youtu.be/x4jwlscqH9s?t=68
      https://youtu.be/x4jwlscqH9s?t=141
      https://youtu.be/x4jwlscqH9s?t=204
      https://youtu.be/x4jwlscqH9s?t=248
      https://youtu.be/x4jwlscqH9s?t=256

      https://youtu.be/kFjETSa9N7A?t=86
      https://youtu.be/kFjETSa9N7A?t=131
      https://youtu.be/kFjETSa9N7A?t=171

      https://youtu.be/A5C0ZG5M7cY?t=34

----------
Tuesday 2019-09-17

  STOPWATCH: 4:28


  WOBBLE PROJECT

    - acceleration + gravity mode: a way to "ignore counter force" like the linear accelerometer mode
      - code implemented using a threshold value to control when to use the "ignore counter force"
        COMMENT: this works better than anticipated and might be improved upon

      - tested hula girl WHILE DRIVING and it looks ok I think
        - threshold value could be adjusted, take a look at acc_x_absolute when taking SHARP TURNS

      * needs testing with other scenes: hello kitty hula, hula girl "spring", sandals


    - limit cumulative torque from gyro and accelerometer

    - many variables defined in RUBE update functions moved to the class-level to avoid re-allocation ==> minutely increased performance

    - defaults created for all scenes except TURTLES, applied when no scene settings have been persisted
      - tested each scene:
        (1) scene defaults are applied on initial run
        (2) modified persisted settings override these defaults

    - scene settings: restore defaults button

----------
Monday 2019-09-16

  WOBBLE PROJECT

    - changing application / scene settings -- removing overlapping settings

    app settings
      - remove advanced mode button
      - moved sensor test to where advanced mode button used to be
      - statistics + fps data combined
      - start with scene defaults + Box2D joint settings from RUBE file

----------
Sunday 2019-09-15

  re-organize version milestones

----------
Saturday 2019-09-14

  DEBUGGER ISSUES FIXED WITH "platform tools 29.0.4"


  WOBBLE PROJECT

    - apply "weld joint" settings - frequency and damping ratio when each scene is loaded


    scene joint summary:

      hang loose hand: weld joint
        - weld joint
          name: "joint_hand"
          - frequency, damping ratio, reference angle

      hula girl: 
      hello kitty hula girl:
        - weld + revolute joints SUPER-IMPOSED

        - weld joint:
          name: "joint_weld"
          - frequency, damping ratio, reference angle

        - revolute joint
          name: "joint_revolute"
          - enable limit, lower limit, upper limit, reference angle (different from weld joint)
          + enable motor, motor speed, max motor torque

      beach sandals: 
        - 4 JOINTS, weld + revolute joints SUPER-IMPOSED for each shoe

        - left foot: "joint_left_weld" + "joint_left_revolute"
        - right foot: "joint_right_weld" + "joint_right_revolute"

      hawaiian turtles: ON HOLD ATM
        - ideas: wacky spinning turtles, falling

----------
Friday 2019-09-13

  WOBBLE PROJECT

    SCENE SETTINGS

      - underlying code implementation

      - joint settings:

          see: Sandals.cpp for some good code examples to use
            * using the "weld" joint almost exclusively
            - changing frequency and damping ratio are relatively easy to modify in the Box2D api
            - changing the reference angle requires redefining the joint definition though
            - any user-defined joint settings would need to be applied in the scene ::afterLoadProcessing function

          FREQUENCY
            - approx. the # times / second joint will update it's position constraint

            SOFT JOINT: lower values
            HARD JOINT: higher values
            RIGID JOINT: ZERO

            - RUBE tested values: 0, 0.1 - 1000, 50+ is fairly rigid
              - this is WEIRD in that 50+ has minor effects
              - the higher the frequency, the less that each step has an effect
              - this might need to be heavily customized

                0.1 - 5 (0.1 step) => 49 discrete values ==> actual: 0.1 - 5.0
                5 - 50 (1.0 step) => 45 discrete values ==> actual: 5.1 - 9.5
                50 - 100 (10.0 step) => 5 discrete values ==> actual: 9.6 - 10.0
                100 - 1000 (100.0 step) => 9 discrete values ==> actual: 10.1 - 10.9
                0 (rigid) => 1 discrete value ==> actual: 11.0

                ---
                total => 109 discrete values ==> actual: 0.1 - 11.0, 0.1 step

          DAMPING RATIO
            - how quickly springy movement is reduced

          REFERENCE ANGLE
            - useful on some scenes, ON HOLD

----------
Wednesday 2019-09-11

  WOBBLE PROJECT


    SCENE SETTINGS

      - modified "scene_settings" variable to a single "catch-all" for all scenes
        - this is restored from persisted scene settings specific to each scene

      - initial layout complete based on chart made on "Monday 2019-08-26"
        - still needs underlying code implementation, save scene settings, and joint implementation
        - joint specific code should be removed or left alone based on the specific scene


    DEBUGGER STOPPED WORKING
      - issues with android sdk "platform tools 29.0.3" - rolled back to "platform tools 29.0.2"
      - https://www.reddit.com/r/androiddev/comments/d2jdfd/android_sdk_platformtools_2903_breaks_debugging/

----------
Monday 2019-09-09

  WOBBLE PROJECT

    - moved ApplicationSettings init code to the layer and reduced scope visibility for SettingsLayer stuff

    scene settings back button return to correct RUBE Scene
      - changed RUBEScene* to Scene* for return type during scene creation to support function pointer for this to work
      * ***INITIALIZATION FOR STATIC FUNCTION POINTER VARIABLE SYNTAX*** a bit hairy, but eventually worked and helps simplify things

----------
Sunday 2019-09-08

  MAZE "GAME"

    - new project created to test (see Wednesday 2019-08-21 for new project "quirks")


  WOBBLE PROJECT

    - HUDMenuLayer::init() changed so that hard-coded png names to "static constexpr const char*" like GameManager.h

    - use AppSettingsScene.h as a template example for scene settings
      - rename AppSettingsScene.h/.cpp to AppSettings.h/.cpp
      - create new files SceneSettings.h/.cpp to handle all the scenes

----------
Saturday 2019-09-07

  MAZE "GAME"

    - RUBE physics scene made for maze + ball

----------
Friday 2019-09-06

  HUD MENU SETTINGS OVERLAY

    - added gear icon for scene settings

    - testing the show / fade-out effect, this didn't work as expected as subsequent touches didn't reset the fadeout timer -- this was fixed. encountered some issues with the cocos2dx scheduleOnce() function as I could only get lambda expressions to work
      - added distinct onTouchBegan / onTouchEnded code to handle this; code ended up "cleaner" this way removing duplicate lambda expression code

----------
Thursday 2019-09-05

  HUD MENU SETTINGS OVERLAY

    - HUD Layer is initially invisible, with HUD Layer items inaccessible. HUD layer "Fade-In" effect on touch

    - added a HUD Layer "Fade-Out" effect after some delay AND no user interaction

----------
Wednesday 2019-09-04

  HUD MENU SETTINGS OVERLAY
  
    - added back button functionality

    - this implementation uses a function pointer stored in the GameManager and this solution GREATLY SIMPLIFIED the overall logic for the HUDMenuLayer AND the RUBEScene-inherited scenes
      - this was a bit hairy because the "back button" implementation was scattered among the various RUBELayers and accessing this from the HUDMenuLayer proved difficult due to visibility constraints, etc.

----------
Tuesday 2019-09-03

  MISC
    - new journal for September 2019 created

    - stats:
        - total: 164/342 based => 48.0%
        - august 2019: 10/31 days => 32.3%


  HUD MENU SETTINGS OVERLAY
  
    - added back button ui-widget


  BOBBLE APP DETOUR - ACCELEROMETER-CONTROLLED "BALL" IN A MAZE

    - decided to take a detour from the bobble app as a diversion

    - tried using the RUBE auto-trace feature to generate mazes

      - this was a good refresher, but unfortunately the maze image I found was too complex using the steps outlined in the RUBE how-to; creating the control points alone took a while and only scatched the surface in terms of the ideal fixture needed for a workable maze -- and this was only a "simple" maze

      - I ended up creating a fixture and modifying the vertices.. this is in the early stages, but creates a cleaner end product I suppose; this technique is workable, but still not a quick process

      * another option is creating a bunch of rectangular fixtures on the same body - duplicating / moving / re-sizing
        pros: this might be faster, more consistent maze wall widths(?)
        cons: creates a bunch of fixtures

----------
Sunday 2019-09-01

  rewatching sampler video
    https://youtu.be/O68lFQWe7-A?t=640
    https://youtu.be/O68lFQWe7-A?t=1580