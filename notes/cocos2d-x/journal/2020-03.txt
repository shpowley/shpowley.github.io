Tuesday 2020-03-31

  maze game

    - diversion from the "bobble" project
    - simple maze graphic + ball created in inkscape and RUBE box2d file created to test out a simple maze/ball navigation using the accelerometer
    - depending on the result, expand the game with different ideas

    - plan to use "rube_wobble_master" project as a template, but a bit of work to "downgrade" code


    RUBE design notes

      - the walls for the RUBE maze are simple "edge" fixtures that are relatively easy to define with a minimal # of vertices (this is actually version 2)
        - with the walls not having a thickness, I'm not sure how the collision distance is determined ATM
        
      - version 1 defined a slightly more complicated maze, but with the walls defined as shapes and having thickness. creating this was much more time-consuming.
      - both versions can probably be tested in this test app

----------
Monday 2020-03-30

  - "bobble" identifier


  "TURTLE" SCENES
  
    - marked the "fins" in each turtle scene as "ethereal" in hopes that the gyroscope torque effects would be less drastic; while this kind of works, the "crazy" rotation effect still impacts each turtle shell

    - added defaults to both scenes to eliminate "crazy" rotation and falling; somewhat moot though

    TODO: there are now TWO turtle scenes. while the new scene is somewhat better, it still doesn't meet the "dashboard toy" definition -- A NEW SCENE STILL NEEDS TO BE CREATED MORE AKIN TO THE "HANG LOOSE" SCENE ON THE CENTER SHELL BODY AND A "SWIMMING EFFECT" ON THE FINS

    TODO(?): move linear_accelerometer_simulated_gravity to scene settings

----------
Thursday 2020-03-26

  - RUBELayer::updateLightSensor() - check _body_bobble existence like RUBELayer::updateIdleWobble()


  BOBBLE BODY

    - some FORWARD THINKING about having multiple bobble toys in a scene

      - currently the RUBEScene/RUBELayer works for individual "toy" scenes, but won't work with multiple RUBE definitions
        - I thought about iterating through a scene with updates to multiple RUBELayer instances, but there will be too much CONFLICTING CODE (ie. pan/zoom touch and possibly other problems)

        *** TODO: CREATE A NEW VERSION(?) OF RUBELAYER that can load multiple RUBE files somehow
          - toy-mode (single) vs scene-mode (multiple)
          - potential problem with angular velocity constraint?


    - property "bobble" implemented IN ADDITION TO using the body name
      - this should allow more granular info/control with each body
      
      * NOT implemented as a RUBE user property -- this simplifies things
        - the appropriate body name is identified in RUBELayer::afterLoadProcessing() and is assigned to the "bobble" property


    "BOBBLE BODY" DEFINITION
      - _body_bobble defined in overloaded ::afterLoadProcessing()
        ex. _body_bobble = json->getBodyByName("body_top");

      - single vs multiple (ie. hula girl vs sandals)

----------
Wednesday 2020-03-25

  LIVE WALLPAPER + OPENGL ES
    - attempted to read the book "OpenGL ES 2 for Android: A Quick-Start Guide" (safari 30 day trial)
    - got as far as ch7/8, but as it got toward 3D projections and textures, the COMPLEXITY+TIME BECOMES AN ISSUE!! VERY COMPLEX
    
    POSSIBLY RETURN TO THIS TOPIC..
      - CHECK OUT FREE RESOURCES 1ST (BOOK AUTHOR WEBSITE - OPENGL ANDROID TUTORIAL)
        - SO COMPLEX.. C++ codebase re-use goal, existing learning material in android java -> ndk, live wallpaper + thread issues..
      - ANDROID CANVAS as an alternative..


  LIST OF PROJECTS (project list.txt)
    - updating list
    - many fixes are required (cmake, latest versions of NDK, etc.) and some unnessary projects deleted


  cocos2d-x PROJECT OPTIMIZATIONS
    - change "proj.android\gradle.properties" line PROP_APP_ABI=arm64-v8a
      - greatly reduces overall project size

    - menu > "Project Structure"
      - change "Android Gradle Plugin Version" and "Gradle Version" to most recent stable

----------
Sunday 2020-03-15

  - development "plan"
  - review last few months of notes -- focus on last few weeks

----------
Sunday 2020-03-08

  ANDROID WARNING:

    "API 'variant.getMergeAssets()' is obsolete and has been replaced with 'variant.getMergeAssetsProvider()'"

  FIX:

    IN FILE "build.gradle"
    CHANGE "variant.mergeAssets.doLast" TO "variant.mergeAssetsProvider.get().doLast"


  LIST OF CURRENT ANDROID PROJECTS (code\android_projects + backup (read-only)\android)
    - moved to a separate text document


  LIVE WALLPAPER

    Cocos2dHelper.java absolutely requires an Activity for initialization. There doesn't seem to be any way around this as the variable "sActivity" is used throughout.
      - THIS IS SOMEWHAT FRUSTRATING.
      - This eliminates a lot of potential code re-use!!


    CODE RE-USE AT ALL POSSIBLE? 
      - image textures? 
      - RUBE .json files? 
      - the cocos2d-x application for configuration? 
      - any existing c++ source code using JNI (RUBE loader, logic)?


    OPENGL 2.0 FOR ANDROID seems to be the next thing to research I guess
      
      relevant links:
        http://www.learnopengles.com/how-to-use-opengl-es-2-in-an-android-live-wallpaper/
        http://www.learnopengles.com/check-out-these-cool-live-wallpapers-games-and-tutorials-by-fellow-learn-opengl-esers/
      * https://code.tutsplus.com/tutorials/how-to-use-opengl-es-in-android-apps--cms-28464 (interesting)
        http://www.jbox2d.org/
        https://www.iforce2d.net/rube/?panel=loaders + https://www.iforce2d.net/forums/viewtopic.php?f=6&t=240

      book: "OpenGL ES 2 for Android" (https://pragprog.com/book/kbogla/opengl-es-2-for-android)
        OpenGL ES 2.0 API Quick Reference Card: http://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf
        OpenGL ES 2.0 Reference Pages: http://www.khronos.org/opengles/sdk/docs/man/
        OpenGL ES Shading Language (GLSL ES) Reference Pages: http://www.khronos.org/opengles/sdk/docs/manglsl/
        The OpenGL® ES Shading Language: http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf
        OpenGL® ES Common Profile Specification Version 2.0.25 (Full Specification): http://www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf
        Khronos EGL API Registry: http://www.khronos.org/registry/egl/

----------
Thursday 2020-03-04

  live wallpaper

    - read links:

      1: https://www.pushing-pixels.org/2010/02/01/live-wallpapers-with-android-sdk-2-1.html
      2: https://discuss.cocos2d-x.org/t/3-2rc0-android-live-wallpaper/15460


      link 1: pushing pixels (2010)
        - good reference, worth revisiting I think

        - WHAT IS ANDROID.OS.HANDLER AND JAVA.LANG.RUNNABLE?
        - REFERENCES ENGINE AND ANIMATIONENGINE - WHAT'S "ANIMATIONENGINE"?
        - EXAMPLE OF SWIPE-SCROLL PARALLAX
        - ABLE TO IDENTIFY IF LIVE WALLPAPER IS IN "PREVIEW" MODE USING "THIS.ISPREVIEW()"
        - "SYNCHRONIZED()" ?
        - CANVAS.SAVE(), CANVAS.DRAWCOLOR(), CANVAS.RESTORE()?
        - ONCOMMAND() USER TOUCH EXAMPLE

        referenced opengl alternative:
          https://web.archive.org/web/20181202175012/http://www.rbgrn.net/content/354-glsurfaceview-adapted-3d-live-wallpapers
          https://github.com/GLWallpaperService/GLWallpaperService
          https://groups.google.com/forum/#!forum/glwallpaperservice (buried link)
          http://www.learnopengles.com/how-to-use-opengl-es-2-in-an-android-live-wallpaper/ (buried link)

        android.service.wallpaper.WallpaperService.Engine internal class methods:
          onCreate() – called when the engine is initialized. At this point the drawing surface has not yet been created
          onDestroy() – called when the engine is destroyed. After this method is called, the engine is no longer valid
          onSurfaceCreated() – called when the drawing surface has been created
          onSurfaceChanged() – called when structural changes (such as size or format) have been made to the drawing surface
          onSurfaceDestroyed() – called when the drawing surface has been destroyed
          onVisibilityChanged() – called when the wallpaper becomes visible or hidden. When the wallpaper is hidden, you should suspend your animation and not draw anything to save the CPU cycles
          onOffsetsChanged() – called when the wallpaper offsets are changed after the user “swipes” the home screen to one of the sides. Can be used to create a “parallax” effect when the wallpaper is moving along with the home screen
          onTouchEvent() – called when the user performs touch-screen interaction with the window that is showing the wallpaper
          onCommand() – called to process a command


      link 2: cocos2d-x forums - live wallpaper

        - discusses Cocos2dHelper.java issue (2014)

        referenced links:
          *** http://www.learnopengles.com/how-to-use-opengl-es-2-in-an-android-live-wallpaper/

----------
Tuesday 2020-03-02

  - create re-usable cocos2d-x/android base project (cocos2dx_template_project)


  live wallpaper

    lwp_test (starting template "live wallpaper" project)

      android activity
        => simple native android live wallpaper
        => cocos2d-x project with simple graphic

      - IMPERFECT, but works to sort of combine native android live wallpaper + cocos2d-x
        - one "issue" is that when starting a cocos2d-x activity from android, TWO activities now exist

      - this was difficult to get working and diagnose issues
        - see github check-in, but basically, besides the standard live wallpaper implementation, gradle.properties needs androidX support and AndroidManifest.xml needs correct theme style (THIS WAS NOT AT ALL OBVIOUS)