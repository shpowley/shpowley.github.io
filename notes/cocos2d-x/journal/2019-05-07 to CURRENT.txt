----------
Friday 2019-05-17

  - I'm guessing around the end of May to complete these tutorials (not counting the advanced tutorials)


  IFORCE2D TUTORIALS

    "Fixtures" tutorial (iforce-FooTest-B.h)

      * NOTE: be CAREFUL of when creating polygon fixtures

        - a LIMIT OF 8 VERTICES PER POLYGON by default (if you need more you can adjust the value b2_maxPolygonVertices in the file b2Settings.h)
        - vertices must be specified in COUNTER-CLOCKWISE ORDER
        - vertices must describe a CONVEX POLYGON

      * INTERESTING NOTE: if fixture density is not specified, body / fixture WILL NOT ROTATE in response to mouse grab in the box2d test harness; not sure if this is expected behavior


      Friction (iforce-FooTest-C.h)

        - "When two fixtures collide with each other, the resulting friction tends toward the lower of their friction values."


      Restitution

        - How "bouncy" a fixture is.
        - "When two fixtures collide with each other, the resulting restitution tends toward the higher of their restitution values."


      Changing fixture attributes at run-time

        - use <fixture> ->SetDensity(), ->SetRestitution(), ->SetFriction()
        * NOTE: setting density also requires a call to ResetMassData() on the body of the fixture


      Iterating over fixtures in a body

        - use <body> ->GetFixtureList() to get the first element in a linked list; for multiple fixtures use this in a for loop


  IFORCE2D C++ BOX2D TEST HARNESS

    - I created this simple physics scenario in the RUBE editor (2 bodies connected via a rotating joint) and exported the scene to c++. From there, I literally copy-and-pasted the code into this Box2D test class constructor - this worked without any problems (iforce-BarTest.h).

    * NOTE: while this dry test run proved RUBE-to-C++, the .cpp code generated is overly verbose and very non-descriptive from a code editing standpoint (naming isn't maintained and there aren't comments to help). for complex RUBE scenes this might be a problem, but my scenes are probably simple enough to get away with using direct export to C++.

----------
Thursday 2019-05-16

  IFORCE2D TUTORIALS

    - learning how to use RUBE editor with box2d scenarios AND put these them into the box2d test harness

    * NOTE: to add new tests to the box2d test harness REQUIRES opening modifying the source code in some type of editor and recompiling
      - visual studio 2019 was used

    BOX2D BODY TYPES
      DYNAMIC - affected by gravity, linear/angular velocity, collides w/ all bodies (unless specified otherwise)
      STATIC - unaffected by gravity, position/angle can be set, but doesn't move
      KINEMATIC - unaffected by gravity, linear/angular velocity, does not collide with static bodies

    - @ "Box2D C++ tutorials - Fixtures" : http://www.iforce2d.net/b2dtut/fixtures

----------
Wednesday 2019-05-15

  IFORCE2D VIDEOS AND TUTORIALS

    - added videos and tutorial items to my TODO list
    - @ "Box2D C++ tutorials - Making a test" : http://www.iforce2d.net/b2dtut/making-a-test


  COCOS2D-X PREBUILT LIBS (comments)

    - I'm just revisiting this topic. In my windows 10 dev environment, the build time is reasonable, even for fresh builds. subsequent builds are even faster, but I guess this could always be faster. it might even save disk space (not sure about this though). marked as a TODO item with a more recent solution using cmake (see cocos2D-x.txt).

    - previously this broke in my crouton environment when trying to upgrade android studio a while back; I ended up having to roll back and lock down the software versions for android studio / cocos2D-x


  DOCUMENTATION
    x cocos2D-x.txt
    x Box2D.txt
    x Build Android Games.txt

    x Cocos2d-x by Example.txt (DELETE)
      - not much here at all.. deleting this
      - more specific info is recorded in various journal entries

    x project ideas.txt (NEW)
      - central location to track current project(s) and ideas
      - TODO ongoing; I only created a placeholder document at the moment

    x books.txt (NEW)
      - central location to track cocos2d-x book reading and chapter summary, chapters completed, etc.
      - TODO ongoing; only a skeleton at the moment
    
    x topics - main.txt (DELETE)
      - barely useful and hard to maintain

----------
Tuesday 2019-05-14

- NOTES FROM HIKE
  - custom app from animated gifs.. add sound file; loop option; pre-made and custom

  - TODO: re-org and consolidate journal notes into a monthly format

  * TODO: from now on use vs code print monthly journal to pdf and markup using android app "xodo"
    - highlight / comment journal sections when going back over them; to make certain sections stand out and over time I learn new things that might be highly relevant

- finished reading through old journal entries

----------
Monday 2019-05-13

- NOTES FROM ATL DRIVE
  - happy face emojis accelerometer react bouncing, circular spring also
  - hello kitty (if hawaii app actually does well), kimono @ megamart, grass skirt, etc. look at IP licensing..
  - fortnite dancing - not sure about this one..
  - swaying feet, sandals (hawaiian), alternate theme also - other graphics: user replaceable (baby feet), generic baby footprint, linux gnome bare feet, dog paws x 4
  - t-rex google page not found: 1) dinosaur reacts to accelerometer jumping with background just always scrolling OR 2) background moves in relation to accelerometer
  - monster truck similar to dinosaur scenario; physics on truck, 2D OR pseudo-3D, obstacles (cars, boulders), varying terrain

  - accelerometer toy "themes"
    - each theme need 3-5+ toys I think
    - many bobble toys could be incorporated in more than one theme
    - flower power: solar powered flower, hawaiian lei, research popular flowers "jostled around", water lilies, hummingbird, butterfly resting, kindergarten style, sunflower, on water
      - hummingbird: it "floats", flapping wings, flying around to flower movement
    - spinning things: pinwheel (very light, little friction), windmill (holland, physics heavier), wind farm, car wheel, gears, fidget spinner, shuriken
    - hawaiian: +android robot w/ hawaiian shirt, lei, hula skirt, different poses
    - cute animals: a lot of possibilies in similar poses
    - food: stacked hamburger (ingredients stack flop), pizza; advertising graphics geared toward businesses
    - christian: buddy jesus, air jesus, christian fish, cross on a chain
      - religion is very touchy though..
    - japan: cherry blossoms in water, sumo wrestler, geisha dancer, shuriken spinning

    - user-customizable graphics in pre-made physics templates: braves tomahawk chopping + logo, hula dancer face or face cutout, circular spring, animation; avoids IP issues
      - animation moving from user tap or accelerometer, individual graphic frames or an animated gif specified by user
        - animation speed remains consistent and always finishes on last frame
        - simplified animation speed control, rotation in 90 degree steps
        - ex. muybridge horse, many on the internet, skull spinning, selfie(s)
  
  - simulated water: boat, boat in a bottle, rubber duck
  - skeleton on a chain, joints connected; theme?
  - morning star on a chain (weapons theme?)
  - leaning tower of pisa
  - hand-drawn art might be a good idea; cuphead video gave me inspiration to develop my own "style" - art styles alone can be a primary appeal to users

  - bobble toys should have the ability to "auto-wobble" or respond to touch / touch-drag; in stationary environments this would be good
  - day dream still a thing, live wallpaper: would be appealing to many and would respond to swipes; panda live wallpaper gave me inspiration for this - very simplistic movement, but art style and functionality generated many downloads
  * drive to ATL got brainstorming about this subconciously; it might be a good idea to just drive around to get new ideas and audio recorded

- OLD NOTES / JOURNAL ENTRIES
  - I need to "catch up" on my dev history, since I took such a long break from this (mostly because of the move and dev environment change)
  - I started journaling since 2018-10-07
  - this is about 7.5 months; a total ~71 days ..out of 219 based on my calendar entries -> 32%

  - looking back on the initial chipmunk physics tests (2018-12-05), this was very error-prone as this was pretty much code trial-and-error; I'm not exactly sure how much of this was issues related to chipmunk per se, but even with code-only box2d implementations, this was tedious. the R.U.B.E. editor should really go far streamlining physics implementations..

----------
Sunday 2019-05-12

- just experimenting with R.U.B.E. joints and attempting to visually understand joint basic operation
- UNFORTUNATELY, there are no pre-built "springs" and I have to work with the joint types provided
- at the moment, it appears that "wheel" joints are closest to what I want as far as creating spring oscillating effects
  - "wheel" @ ~ frequency < 4 and damping ratio < 0.5 (last f=1, dr=0.03)

----------
Thursday 2019-05-09

- R.U.B.E. video tutorials continued
  - a lot of information and time-consuming to watch all the videos..

- R.U.B.E. iforce2d has a bunch of c++ box2d tutorials
  - https://www.iforce2d.net/b2dtut/introduction

----------
Wednesday 2019-05-08

- R.U.B.E. video tutorials

  - though there are some free tools that accomplish similar goals, this seems the most feature complete, maintained and well made; considering my end goals, this will probably be an essential tool

  - watch video tutorials

    * RE-WATCH especially the joint video tutorials
    - video tutorials were recorded in 2012 and additional features have been added
    - original joint types include: REVOLUTE, PRISMATIC, DISTANCE, WHEEL, ROPE
    - new joint types are: WELD, FRICTION, MOTOR

    * TODO (2): create a file with different types of joints and "play" with settings (TAKE NOTES)
      - implementing something like an axis-constrained SPRING isn't exactly 1-to-1, it has to be finagled.. a distance joint with frequency and damping set I think and even then, it not constrained to any axis. this is more of a box2d thing, but I'm not sure if it's a "limitation" per se

    * TODO (3): TAKE NOTES OF EACH TYPE OF JOINT AND WHAT THEY DO IN MY OWN WORDS

- TODO (1):
  - finish watching video tutorials
  - install keepassx, update iforce2d password
  - install paid version of R.U.B.E. and loaders