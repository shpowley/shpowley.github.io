Thursday 2020-02-27

  LIVE WALLPAPER

    notes: Saturday 2019-06-22 - Wednesday 2019-06-26

    https://developer.android.com/reference/android/service/wallpaper/package-summary
    https://androiddvlpr.com/android-live-wallpaper-tutorial/ (2019 animated gif)

    - tried the vogella live wallpaper example, it compiles and works, but it's rather old from 2010
      https://www.vogella.com/tutorials/AndroidLiveWallpaper/article.html
      - prefs are deprecated, but still work, though they don't immediately take effect..
      
      vogella tutorial is based on:
      https://www.pushing-pixels.org/2010/02/01/live-wallpapers-with-android-sdk-2-1.html
      - good explanations (pure native android)

    - combined vogella + tuts+ tutorial for simple image + animated gif
      tuts+ animated gif tutorial:
      https://code.tutsplus.com/tutorials/create-a-live-wallpaper-on-android-using-an-animated-gif--cms-23088

    - android canvas api might be useful
      https://developer.android.com/reference/android/graphics/Canvas

    - an alternative of creating animated gifs from image captures..
      https://stackoverflow.com/questions/16331437/how-to-create-an-animated-gif-from-jpegs-in-android-development



  surfer scene

    TODO: *** perhaps a new setting for accelerometer induced torque scaling, separate from the current accelerometer scaling effect; why? because sometimes both induced force AND induced torque are enabled, and the current scaling effect isn't necessarily desirable on both

    TODO: tuning still necessary, but required joints "wired" appropriately to be controlled by the developer settings

    TODO: step ::initHUDSliderData() needs experimental refinement

    TODO: images - surfboard color is too close to skin-tone; better artwork; fix waist artwork to allow for more rotation
    TODO: RUBE physics - arms too wobbly, slightly higher frequency


  tux feet

    TODO: when RUBE scene is initially loaded, physics is ok, but RIGHT FOOT ANGLE SETTINGS BECOME MANGLED after 
    returning from developer settings (FIXED?)

      SCENES            BEACH SANDALS                       TUX FEET

                        LEFT WELD       RIGHT WELD          LEFT WELD       RIGHT WELD
      REFERENCE ANGLE   -3              3                   1.81            -1.2

                        LEFT REVOLUTE   RIGHT REVOLUTE      LEFT REVOLUTE   RIGHT REVOLUTE
      REFERENCE ANGLE   -90             -90                 -140            -60
      LOWER LIMIT       30              30                  110             30
      UPPER LIMIT       150             150                 190             110

      - comparing the "tux feet" and "beach sandals" scenes, the exact code for handling the feet weld/revolute joints can't be reused
      - the "beach sandals" scene are an exact mirror, whereas the "tux feet" scene has custom values for each foot
      * the tux feet revolute joint code has been removed along with the revolute joint visibility in developer mode ..THIS ONLY PARTLY FIXES THE ISSUE

      TODO: the tux feet weld joint reference angle code still needs fixed, but is bit more complex


    NOTE / TODO: accelerometer "noise" at steady state actually work pretty well for idle wobble visual effect compared to what I have for the beach sandals - the weld joint frequency, etc. might have something to do with this. this needs experimentation and depending on the results could carry over to the beach sandals. this is only at steady state as slightest vibration causes pronounced movement..

----------
Tuesday 2020-02-25

  - traced "_body_bobble" variable and it's effects in update() and related functions
      RELATED NOTE:
        - there are now 2 turtles scenes that behave erratically depending on various scene settings
        - this erratic behavior is what prompted the _body_bobble evaluation
        - neither turtle .cpp scene overrides ::afterLoadProcessing()
        - also, some erratic behavior could possibly be solved by marking the body appendages (including the head) as "ethereal"; I'm not sure about "touchable" yet


  add new scenes to android project ("NEW SCENE PROCESS DOCUMENTATION" - Sunday 2020-01-19)
    - "android hula" and "surfer" RUBE assemblies are more-or-less based on the "hula-multi-joint"
    + "tux feet" RUBE assembly is similarly based on the "sandals" RUBE assembly
      - code for these scenes re-purposes much of the same code

    - basic scene settings established with more precise tuning later on

    TODO: step ::initHUDSliderData() needs experimental refinement for each new scene
    TODO: "android hula" arm re-position logic needs implementation


  * my android "wobble" project will most likely make a SLIGHT DETOUR. for some time now, I've had the idea of CUSTOMIZABLE TEMPLATE SCENES that use either:

    a) very BASIC BOX2D/RUBE PHYSICS MODEL - (1) pure rotational - "hang loose" OR (2) a simplified multi-joint - "hula girl"
    b) GYROSCOPE CONTROLLED SPINNING 3D .OBJ (similar to spaceship demo)

    - the key difference between what I'm currently working on and this is that the GRAPHICS WILL BE SUPPLIED BY THE END-USER - with perhaps a few demo graphics

    - in the beginning, ONLY ONE OF EACH TYPE OF SCENE WILL PERSIST. with the POSSIBLILITY OF CREATING MULTIPLE SCENES BASED OFF OF ONE OF THE TEMPLATES LATER ON

    - the box2d/rube scenes should be able to specify the primary box2d-body graphic AND one additional background graphic. each graphic can then be moved/resized around to better compose the physics "toy"
      - moveable/resizeable accessory item graphics?

    - the 3d .obj scenes should only be able to specify a .obj
      - custom background graphic

      * use gyrotest project as a template for this "CUSTOM 3D OBJECT VIEWER" APP / ANDROID LIVE WALLPAPER
        - current rotation tracks gyroscope, but compass/magnetometer might be a better option(?)
          - track only y-axis spin feature
        - touch-swipe induced y-axis spin, touch-stop features, spin friction(?) to slow over time
        - configuration: use your own 3d .obj files (other formats?) OR pre-made list
        - configuration: initial size, x or z-axis angle
        - quick HUD button control modes for above features? (similar to wobble master)

    * the background image should be able to be customized, but this functionality is blurred with the ongoing "toy" vs. "multi-toy scene" development. this type of customization might be better utilized in the "scene" composition

    - this project diverges from my original hawaiian-themed "wobble" project, but obviously will SHARE A SIGNIFICANT CODE BASE and SHOULD EXIST AS IT'S OWN INDEPENDENT APP
      - I'm not sure of a good name yet: "dashboard customizer" OR "dashboard toy customizer"

    - I'm not sure if these scene templates would really fit into the hawaiian-themed "wobble" project per se, but I could re-purpose some logic to create a hula dancer (or similar scene) with a cut-out face where the end-user could specify a face photo that could be moved/resized

----------
Sunday 2020-02-23

    android project
      - final prep + compressed scene resource files
      - copied resource files to the android project and added to git source control


    TUX FEET

      - scale had to be increased as the phone resolutions guide was initially set to the wrong height; adjustment made for the weld joint resting angle with gravity effects

      - eyeballs now move within a constrained area; primary eyeballs "body" had a "fix rotation" setting which help prevent eyeballs rolling at the end of the distance joint

      TODO: the eyelids graphic needs to be larger on top to prevent eyeballs being visible at the top edge when they move


    SURFER

      - scale increased 2x similar to TUX FEET + joint adjustments

      design notes:
      
        - when scaling, prismatic joint limits aren't scaled to match and manual adjustments are required


    ANDROID HULA ROBOT

      - scale increased 2x similar to TUX FEET + joint adjustments

      - the current joint settings allow for poseable arms

      TODO: white/black outline for robot shapes, especially the arms (parts overlapping the body turn invisible)
        - outline should be a separate graphics (I DON'T REMEMBER WHY??)

      TODO: in order to "lock" the arms in place, the weld frequency should be set to zero and the weld reference angle should be set to the pose angle programmatically (body angle? not sure yet)

----------
Friday 2020-02-21

  SURFER / TUX FEET / ANDROID HULA ROBOT

    TUX FEET

      - conceptually similar to the beach sandals scene, with the addition of moveable eyeballs

      design notes:

        - stopped @ eyeball joints
          - eyeballs are 1 unit at the moment
          - needs static + middle + eyeball bodies similar to hula multi-weld
          - more tests needed

        - for each foot, the rest position at each weld joint with frequency=2.3, the weld joint reference angle must be customized to counter the effects of gravity
          - unfortunately, the resting reference angle is affected by gravity, weld frequency and body mass distribution

----------
Tuesday 2020-02-18

  SURFER / TUX FEET / ANDROID HULA ROBOT
    - creating RUBE box2d assemblies

    SURFER

      design notes:
        - peripheral joint/bodies shouldn't be directly affected by the motion sensors - these are marked "ethereal"
          - to clarify - the arms wobble, but only is response to the surfer's torso (bobble) and NOT directly by the accelerometer/gyro
        - TODO: the main body / shorts waist band should be altered visually to allow more movement on the revolute joint

----------
Monday 2020-02-17

  REVOLUTE JOINT "POSEABLE" POSITIONS
    
    TAGS: revolute joint, enable motor, torque, poseable

    EFFECT: "poseable" box2d bodies when attached to a revolute joint

    - I wanted to write a note regarding this for later reference. I thought I had written about this previously, but couldn't find anything with a search of my notes
    - basically, I noticed this effect a while ago in the RUBE editor, but apparently didn't make any notes regarding this "unusual" effect
    - this effect should allow the ANDROID HULA ROBOT to have poseable arms and this technique may be useful in the future

    - to ENABLE THIS FEATURE, in the settings for a revolute joint, set "enable motor = true" and "max motor torque > 0"
      - the value for "max motor torque" defines the torque strength necessary to move the joint
      - when a weld joint is superimposed onto a revolute joint, the value for MOTOR TORQUE should be tested against the weld-spring settings (frequency, reference angle)
        - see "sandals.rube" and experiment with this file to better visualize this relationship


  SURFER / TUX FEET / ANDROID HULA ROBOT
    - creating RUBE box2d assemblies

    ANDROID HULA ROBOT
      - bobble body: superimposed WELD-REVOLUTE on a superimposed DISTANCE-PRISMATIC
        - copying the HULA GIRL MULTI-JOINT - RUBE "spring assembly" for use here

        * NOTE: I've often noticed that the hula box2d assemblies often are displaced a small distance whenever a scene first loads
          - I think I've found a fix -- for the distance joint, INCREASE THE LENGTH PROPERTY by the displacement measured in the RUBE simulator grid
            for instance, on the ANDROID HULA ROBOT, I typically see a 0.01 displacement when the world gravity = (x: 0, y: -10); so increase the distance joint length from 0.2 to 0.21 to counter the displacement effect

      - poseable arms: superimposed WELD-REVOLUTE (x2) + motor torque (see NOTE 1)
      - bouncing antenna: superimposed WELD-REVOLUTE (x2)
      - grass skirt fronds: TODO (based on an animated hula gif I have, where the hair + some fronds move independent of the torso, I'm planning on having 4-5 fronds move in response to the bobble body, just for the added visual effect; this could also be used for other hula-style scenes or other visual components - hair and a lei come to mind)

      NOTE 1:
        - relatively happy with the RUBE scene physics. this bobble spring joint assembly seems pretty good and should be used as a reference.

        - using the WELD-REVOLUTE joint settings alone, however, is insufficient to implement the poseable arms feature. fully rigid weld joints are needed to keep the arms in place while dance-wobbling, but flexible during the user-touch when posing the arms. 
        
        TODO: this needs to be done programmatically during user-touch (weld frequency = 1), otherwise it should be rigid (weld frequency = 0). once finished with posing an arm, the weld reference angle should be set (clockwise direction is +angle). hopefully, this works. also, each arm pose should persist.

----------
Sunday 2020-02-16

  SURFER / TUX FEET / ANDROID HULA ROBOT

    - exported to bitmap => started creation of RUBE box2d assemblies

    EXPERIMENTING WITH IMAGE SIZE / DPI
      - currently, all scene resources use ~40dpi
      - for the ANDROID HULA scene, I'm trying both 40dpi and 200dpi

      TEXTURE PACKER notes:
        - 2048 pixels x 2048 pixels appears to be the optimal spritesheet size for mobile

        - for the ANROID HULA @ 200dpi, TEXTURE PACKER split this file, but hasn't yet been tested in the android project
          - other options not tried include TEXTURE PACKER scaling OR a max spritesheet of 4096 pixels x 4096 pixels OR a smaller DPI (100-160dpi maybe) to avoid the TEXTURE PACKER split

        *** DUPLICATE GRAPHICS (ie. ANDROID arms, legs, antenna) are handled quite well by TEXTURE PACKER, but need to be in the same orientation for texture packer to recognize duplicates

      RUBE notes:
        *** image assets appear to be INTERCHANGEABLE with different image densities -- just move the .rube file to another folder with duplicate image resource names (or equivalent programmatic method); the image appears to be scaled to fit automatically

        * note each image asset and it's "filter" property
          - by default "filter = linear" which smooths out pixels with the alternative of "filter = nearest"
          - the default "filter = linear" seems to create an unwanted outline effect @ 40dpi
          - "filter = nearest" allows for easier re-positioning of moveable graphics on a reference image

----------
Friday 2020-02-14

  SURFER / TUX FEET / ANDROID HULA ROBOT

    - basic svg graphics created; tomorrow export to bitmap and begin new scenes creation

----------
Thursday 2020-02-13

  GIMP SCALING

    PIXEL ART ALTERNATIVE? scaling selection or image with resize filters for SVG created art


  INKSCAPE LINE DRAWING + PATTERN TECHNIQUE (moved to inkscape.txt)
  
    NOTE: I think this was used to more easily create "grass" fronds on the android hula skirt


  INKSCAPE REFERENCE + KEYBOARD SHORTCUTS (moved to inkscape.txt)

----------
Wednesday 2020-02-12

  - break due to move

  SURFER SCENE
    - surf board

  TUX FEET / ANDROID HULA ROBOT