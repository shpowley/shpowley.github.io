Friday 2019-05-31

  Android custom loader IMAGE TEST

    - NEW PROJECT "rube_loader_image"

    - "b2dJSON" source is a directory LINK so that this can be shared across projects
    - copied "DebugDraw" source from "rube_custom_loader" project (TODO item)
    - copied iforce2d "QueryCallbacks.h" (TODO item)

    COMMENT: why not just combine "RUBELayer" and "BasicRUBELayer".. not sure

    - stopped @ getting the images + box2d physics running with demo code


    iforce2d DEMO
      
      - image-specific b2dJson code example located @ RUBE demo > RUBELayer.h/.cpp

      - RUBELayer inherits from BasicRUBELayer which in turn inherits from cocos2d::Layer
        
        "RUBELayer" << "BasicRUBELayer" << "cocos2d::Layer"

        * NOTE: the RUBELayer classes kind of "squish" the scene and layer objects together, unlike my "Celestial > AsteroidScene" code

----------
Thursday 2019-05-30

  *NOTE: both the PULLEY and GEAR JOINTS are NOT IMPLEMENTED IN THE RUBE EDITOR and if needed, would require coding them directly (and probably a good code example too)


  Android custom loader IMAGE TEST

    tried creating a simple "hula girl" physics scenario in RUBE and exported this to JSON format + images

      a) the RUBE scenario is way too small (I think)

      b) I tried to get away with replacing the "bobble.json" in the rube_loader_custom project, but failed. later I realized that I forgot to implement the image loading code from the android RUBE demo - I didn't try to debug, but of course it would fail. I restored this project back to the way it was so I would have a slightly customized REFERENCE PROJECT for the android RUBE loader


  at the moment, I think the FOLLOWING JOINTS PROBABLY BEST FIT MY NEEDS for my "Dashboard Toys" app idea:

    - the WELD JOINT (as a traditional physics ROTATIONAL SPRING)

    - a "composite" DISTANCE / PRISMATIC JOINT (traditional COMPRESSION SPRING) : see "compression-spring.rube" file I made
      - the default DISTANCE JOINT by itself allows the attached bodies to rotate freely which is undesirable, but with the addition of a PRISMATIC JOINT on the same bodies, it keeps them from rotating

    - the default REVOLUTE JOINT (many use case scenarios)

    * additional COMPOSITE JOINTS may be possible through experimentation (like a 2D "spring" composed of multiple WELD JOINTS or a combination of WELD + PRISMATIC JOINTS {EDIT 2091-06-08: I think I meant WELD + REVOLUTE JOINTS}), but that adds complexity and maybe processing overhead(?)


  EXPERIMENT with WELD, FRICTION, MOTOR JOINTS IN RUBE editor

    WELD JOINT

      - essentially a "ROTATIONAL SPRING" that attempts to return to it's REFERENCE ANGLE
        - has "frequency" (spring stiffness), oscillation "damping", and a "reference angle" (EDIT 2019-06-08: mass of connected bodies greatly influences the spring effect)

      - a REVOLUTE JOINT with the motor enabled and with a torque has imbues rotational friction, but won't snap back to the reference angle like a spring


    FRICTION JOINT

      - very unique type of joint that controls FRICTION for both ROTATION and DISTANCE
      - there are only settings for "max torque", "max force" and maybe "collide connected"
      - usage: ???, maybe simulate object destruction


    MOTOR JOINT

      - at first glance, this seems very much like the FRICTION JOINT
      - when setting the CORRECTION FACTOR to a non-zero value, however, it behaves as an ELASTIC FORCE that ATTEMPTS TO RETURN TO IT'S INITIAL STATE for DISTANCE and/or ANGLE
      - high/low values for MAX TORQUE / MAX FORCE determine the overall resistance strength
      - higher CORRECTION FACTOR result in a fast-snap elastic force, whereas a lower value results in slower/sluggish elastic force
      - no oscillation upon returning to the initial position
      - usage: ???

----------
Wednesday 2019-05-29

  MISC

    - re-watch RUBE tutorial vid #9-14 (joints) and take notes


  IFORCE2D TUTORIALS

    "Prismatic joints" (iforce-PrismaticJointTest.h AND iforce-PrismaticForklift.h)

      usage examples:
        - elevators
        - moving platforms
        - sliding doors
        - pistons

      - also known as a "slider" joint

      localAxisA:
        - axis of movement RELATIVE TO BODY A
        - normalized X/Y unit vector (this can also be NEGATIVE - which would affect perceived motion when setting joint limits and motors)
        - remember to normalize the vector using ".localAxisA.Normalize()" if vector length is not 1

      local anchors:
        - points on each body that should stay on the joint's movement axis

      referenceAngle:
        - the angle to be enforced between the bodies
        - from the point of view of bodyA with bodyB rotated about localAnchorB
        - this does not impact sliding prismatic axis (localAxisA) angle, just the fixed rotation angle of bodyB

      JOINT LIMITS:
        - can be set in the joint definition or at run-time
        * SETTING BOTH JOINT LIMITS TO THE SAME VALUE is a handy way to "clamp" both bodies to a fixed translation along localAxisA (see tutorial note)

      MOTOR:
        - can be set in the joint definition or at run-time
        - setting the speed to zero creates "friction" of free movement

      "iforce-PrismaticForklift.h"
        - simplified forklift example built by the author that further elaborates on prismatic joints
        - 2 primatic joints connected at 90 degrees to one another and controlled via the keyboard to simulate a forklift moving a box from 2 shelf positions
        - use of "maskbit" to keep the box on the shelves while allowing the forklift to pass through

----------
Tuesday 2019-05-28

  MISC
  
    - re-watch RUBE tutorial vid #7+ and took notes


  IFORCE2D TUTORIALS

    "Joints overview"
    
      - mostly a discussion -- DEFINITELY REQUIRES EXPERIMENTATION IN THE BOX2D TEST HARNESS
      - requires a joint defintion similar to fixtures and bodies
      - "b2Joint" is the base class for ALL JOINTS types, but never used directly


    "Revolute joints" (iforce-RevoluteJointTest.h)

      usage examples:
        - wheels or rollers
        - chains or swingbridges (using multiple revolute joints)
        - rag-doll joints
        - rotating doors, catapults, levers

      - somewhat peculiar behavior when compared to linear velocity / force test
      - see the keyboard example code for forward/stop/reverse

      - use a combination of min/max angle limits and motor force / target speed
        - reference angle (at rest)
        - "negative" motor force doesn't really work like I thought, this should always be positive or 0 I guess; instead, target speed should be -/+
        - many settings can be specified in the definition or at run-time
        - no instantaneous SetAngle() exists (set limits to accomplish this)
        - ->EnableMotor(false) for spinning wheels appear to spin indefinitely at the cutoff speed and appear have no "friction"; add "friction" with low torque / zero target speed

      * compare this to (Monday 2019-05-20 "Rotating a body to a given angle" - iforce-RotationTest.h)
        - UNLIKE THE REVOLUTE JOINT, however, <body> ->ApplyTorque() and ->ApplyAngularImpulse() are applied to a BODY'S CENTER OF MASS
        ** if a BODY CENTER OF MASS and REVOLUTE JOINT PIVOT were the same... this would require experimenting

----------
Monday 2019-05-27

  MISC

    - re-watch RUBE tutorial vid #5 and 6 and take notes
    - backup pc


  AUDIO NOTES

    - app settings
      - driving, stationary desktop
      - gravity + acceleration OR linear acceleration
      - random auto-wobble

    ? maybe test project in my name, maybe open-source mascots (gnu, android robot, tux hula), learning experience

    - business names / app names:
      - in motion, accel, animotion, animoji, animotes (EDIT 2019-06-08: roly polygon w/ emphasis on roly poly)
      - stuck with "accelerometer" concept in name? use a more generic name? my initials and acronym??


  IFORCE2D TUTORIALS

    "Drawing your own objects" (iforce-DrawObjectTest.h)

      * custom class (Ball) with a "render()" method, called during the box2d-physics Step() function
        * compared this last tutorial, where custom DebugDraw uses inheritance to override "DrawSolidPolygon()"

      - once again opengl-specific calls couldn't be used; deprecated in favor of shaders..?
      - I'm planning to learn opengl shader programming (I really hope not), so I just used DebugDraw calls as much as possible; this doesn't allow for custom image rotation
  

    "user data" (iforce-UserDataTest.h)

      - void pointer to outside objects
      - user data c++ pointer are part of the following box2d classes: b2Body, b2Fixture, b2Joint

      * store COMPLEX USER DATA using a CUSTOM STRUCT (a great example is shown)

        NOTE: caveat with user data is that it's a good idea to be consistent with the type of data stored (complex struct is probably best)

        NOTE: box2d doesn't delete user data, REMEMBER TO CLEAN UP

      - example does the same as previous project with ball, except with a reference to ball in each box2d body, modifying properties


----------
Friday 2019-05-24

  MISC
    - transcribe audio notes
    - note observations and improvement ideas for CUSTOM ANDROID RUBE LOADER
    - created android app dev plan (i.e. apps I want in order of development, business related stuff, etc.)


  DEBUGDRAW
    - I tried to do a drop-in REPLACEMENT OF BOX2DDEBUGDRAW.CPP/.H WITH GLES-RENDER.CPP/.H, but that FAILED DUE TO SEVERAL INCOMPATIBILITIES. I might study this in more detail later.
    - BOX2DDEBUGDRAW.CPP/.H works ok, it's just that the fill(?) color for BODIES REMAIN IN A FIXED POSITION for some reason, even though the shape outline moves

  
  IFORCE2D TUTORIALS

    "using debug draw" (iforce-DebugDrawTest.h + iforce-DebugDraw.h)

      - overriding "DebugDraw" class - "DrawSolidPolygon" method
      - I decided to try this again as tutorials further along seem to build off of this..
      - I completed the code as much as possible, however, the DebugDraw implementation isn't working in the windows 10 environment for some reason. a lot of the opengl functions in this tutorial are unavailable.

----------
Thursday 2019-05-23

  MISC
    - continue with b2djson loader: android custom project
      - continue notes on "Wednesday 2019-05-22"

----------
Wednesday 2019-05-22

  b2djson LOADERS

    *** http://www.iforce2d.net/b2djson/
      - programming usage case examples and reference


    B2DJSON LOADER: COCOS2D-X / BOX2D

      - the default "sampleLoaders" directory didn't have the latest cocos2d-x sample; the latest is v3.4


      ANDROID/COCOS2D-X PROJECT SAMPLE PROJECT

        !! WOW - THIS COMPILED AND WORKED ON THE FIRST ATTEMPT !! I was very surprised

        - GOOD PERFORMANCE, PINCH-TO-ZOOM FEATURE on some demos
        - IMAGES ALSO LOADED using b2djson
        - BOX2D MOUSE JOINT feature
        - simple UI CONTROLS demo (useful?)
        - physics draw layer

        - simple menu demo didn't really do anything though..

        COMMENT: with IMAGES ABLE TO LOAD DIRECTLY WITH B2DJSON and VERTEX EDITING IN RUBE, I almost didn't need to purchase texturepacker (though the spritesheet feature will be necessary down the road)


      ANDROID/COCOS2D-X PROJECT TO TEST CUSTOM JSON CREATED IN RUBE EDITOR

        - studying BasicRUBELayer.cpp/.h to get a feel for how to load my custom/simple RUBE json file. this is definitely the file I want to be looking at, however, after browsing this code, I'VE NOTICED SEVERAL IMPORTANT THINGS

          - I'm not sure if the technique using PTM_RATIO can be used as in the celestial project; BasicRUBELayer.cpp/.h provides worldToScreen() and screenToWorld() methods

          * DEBUGDRAW INCLUDE FILES AND IMPLEMENTATIONS ARE VASTLY DIFFERENT across the many projects I've looked at so far..
            -I've found several different versions with similar function signatures: celestial project (GLES-Render.h/.cpp), rube_loader_demo (Box2DDebugDraw.h/.cpp), iOS (GLES1DebugDraw.h/.cpp), etc.
            - attempted to use the Box2D Testbed Framework files "DebugDraw.cpp" and "DebugDraw.h", but I ended up having to fallback to the ones provided with the android loader sample

        * "rube_loader_custom" android project houses my json loader simple box2d scenario test. essentially the hula dancer bobble toy, but with simple shapes. so after using the demo project as a code template, this eventually worked. I also incorporated the ACCELEROMETER to work with this box2d scenario, but this REQUIRED TWEAKING THE MANY SETTINGS: MASS/DENSITY, BOX2D "WELD JOING" SETTINGS, etc. to get this to work properly.

          - this still needs work: b2Sprite integration, PTM_RATIO?, box2d joint limits/adjustments, mouse joint limits?, etc.


    B2DJSON LOADER: WINDOWS BOX2D TEST HARNESS

      - copied b2dson from one of the loader examples into SDK/RUBE-b2djson folder
        - each example appears to use the same source files

      - created a link using MS mklink and moved this to SDK\Box2D\Testbed\Tests folder

      - I had to FIX the following:
        - b2dJsonImage_OpenGL .h/.cpp were NOT INCLUDED in the visual studio project heirarchy to prevent compile errors

        - b2dJson.cpp
          int32 vertexCount = poly->GetVertexCount();  HAD TO BE CHANGED TO
          int32 vertexCount = poly->m_count;

          ->GetVertexCount() appears to be deprecated in Box2D 2.3.2

          NOTE:
            - m_count is the # of vertices in b2Polygon only
            - for something like b2Vec2 arrays, however, use SIZE OF ARRAY calculation = sizeof(<b2Vec2 array>) / sizeof(b2Vec2 element);

----------
Tuesday 2019-05-21

  MISC

    - sidetracked adding TODO items for integrating latest box2d to cocos2d-x and removing chipmunk
    - fill in "project ideas.txt" and try to sort by themes


  IFORCE2D TUTORIALS

    * NOTE: I can't really test these projects ("using debug draw" AND "drawing your own objects") because of the same reason given in the tutorial "rotating to a given angle". I think either there is something wrong my development environment or the opengl api calls used in these tutorials are deprecated from an older version (not sure exactly)


    "using debug draw" (CODE EXAMPLE SKIPPED)

      - basically, this shows how to subclass "DebugDraw" (I honestly don't think I'll be doing this)

      - don't forget to set the drawing flags for the type of visibility of elements desired (shapes, connections, aabb, broad-phase pairs, center-of-mass)


    "drawing your objects" (CODE EXAMPLE SKIPPED)

      - basically, drawing shapes independent of debug draw for an example game-entity


  B2SPRITE (CELESTIAL PROJECT)

    - my custom b2Sprite inherits from the cocos2d-x Sprite, overriding positioning functions to keep the box2d and sprite object positions in-sync
      
      Asteroid < b2Sprite < Sprite (cocos2d-x)

    - for my asteroid test, everything seems to match up on the center of the sprite and box2d body, however, I'm not sure of the alignment for physics bodies with multiple fixtures

    - the debug draw acts independently of the b2Sprite and visibility isn't controlled at a granular object level - it's more of an application-level on/off, but that's probably fine

      * however, the default position will be (0, 0) and even for hidden objects, the physics debug will still render at that position


    RUBE INIT

    - in b2Sprite-based objects, the physics body is defined in the creation/init

    - I think the RUBE definitions can be loaded in the scene load (1), then the bodies created as pointer definitions (2), initialized bodies passed into the create method, similar to the container physics layer (3)


----------
Monday 2019-05-20

  BOX2D TEST HARNESS

    - randomly looking at pre-built tests for ideas and code show-and-tell
      - slider crank - locomotive
      * cantilever - hula spring, floating dragon or fish
      - car - great for vehicle project ideas (camera for box2d?)
      - body types - body type can be changed at run-time
      - chain vs rope joint
      - breakable
      - bridge - vehicle projects
      - theo jansen's walker - mech walkers
      - web - spider web + spider


  MISC
    - re-read journal entries for this month
    - re-watched RUBE tutorial vid #3 and took notes


  PROJECT IDEAS

    - I thought of these earlier today. I mentioned a monster truck with scrolling background.
      - along the same lines, I thought of "moon patrol" from way back during the atari 2600 days, but basically variations on that. a space land rover with a moon landscape and moon-like gravity..
      - similarly, a old style train locomotive. this would be interesting as it has many moving parts, the tracks/terrain has to be flat. the terrain+vehicle+camera needs to be brainstormed.
      - stunt car / motorcycle / skateboarder
      - mech walker / imperial walker
      - tank


  IFORCE2D TUTORIALS

    NOTE: all iforce2d tutorials are done on the box2d source code, specifically in the test harness


    "Rotating a body to a given angle" (iforce-RotationTest.h)

      - similar to last topic, using angles instead of linear movement
      - rotation accomplished by using transform, torque, or impulse

      - opengl calls to draw a "dot" didn't work at all - these api calls exist in <gl/GL.h>, but were inaccessible after a few attempts and I gave up; I ended up using "g_debugDraw.DrawCircle"

      - COMMENT #1: these methods are somewhat involved; LOOK AT THE CODE COMMENTS

      - COMMENT #2: though I can't be sure of this without further testing, the impulse technique should be operate outside the Step() function, similar to the linear impulse

    
    "Jumping" (iforce-JumpTest.h)
    
      - linear y-velocity, y-force over # time steps, impulse, or prismatic joint
      - pros/cons of each

----------
Sunday 2019-05-19

  ESKIMO ACCELEROMETER IMPLEMENTATION

    * see journal "Wednesday 2019-01-23", section "ACCELEROMETER" (fairly good explanation) AND GameLayer.cpp in Eskimo code

    * today's iforce2d tutorials ("custom gravity" and "constant speed") seem highly relevant

      COMMENTS:
      
        - maybe world->SetGravity() in response to the accelerometer to affecting all box2d objects(?) in the Step() function

        OR

        - body->ApplyForce(b2Vec2(mass * acc.x, mass * acc.y), ...) on individual box2d objects(?) in response to the accelerometer in the Step() function

    - cocos2d-x is limited to ACCELERATION+GRAVITY ONLY without using JNI TO ACCESS OTHER SENSOR DATA OR using the pseudo LINEAR ACCELERATION TRICK as in the javascript hula/piggly wiggly project

      COMMENTS:

        - JNI for other sensors might be good and also for obtaining light sensor readings
        - what about Apple iOS and linear acceleration and light sensor data?? (in the distant? future)


  IFORCE2D TUTORIALS

    * NOTE: keyboard override function signature has changed

    "custom gravity" on specific objects (iforce-GravityTest.h)
      ->ApplyForce() with negative gravity in Step() function
      ->SetGravityScale() : 0 = cancel, -1 reverse (NEW, easier syntax and set outside Step() function)

    "constant speed" (iforce-SpeedTest.h)
      - gradual vs instant speed comparisons
      + more complex speed implementations using force (not in code test)

----------
Saturday 2019-05-18

  * based on observation, I think loading RUBE JSON definitions would probably be best. it's a bit more work, I think, but offers flexibility and hopefully it will be easier to identify objects


  MISC

    - journal moved to monthly format
    - re-watched RUBE tutorial vid #1 and took notes (new document RUBE.txt)


    * ASTEROID box2d/cocos2D-x/android project is the template for building my apps

      - see AsteroidScene .cpp/.h | AsteroidScene::init() AND PhysicsLayer .cpp/.h
      - multiple layers on a scene (with separate layers for physics and associated sprite objects)
      - box2d PHYSICS DEBUG DRAW functionality (see common.h for #define flags)


    COCOS2D_DEBUG

      - used in CCLOG(), this needs to be modified in the Application.mk

        APP_CPPFLAGS += -DCOCOS2D_DEBUG=1


  IFORCE2D TUTORIALS

    world settings

      ->setGravity() can change world gravity at run-time

      ->Step() advances the world physics simulation
        * recommended to set the iterations as low as possible, especially low # of physics bodies / collisions
        - # of iterations only specify an UPPER LIMIT, box2d can actually use less
      
      - delete world as normally done for c++ pointers

      iforce-ForceTest.h
        - code sample shows how to override test harness keyboard input method
        - 3 bodies demonstrating ApplyForce, ApplyImpulse, Transform, ApplyTorque, ApplyAngularImpulse

----------
Friday 2019-05-17

  - I'm guessing around the end of May to complete these tutorials (not counting the advanced tutorials)


  IFORCE2D TUTORIALS

    "Fixtures" tutorial (iforce-FooTest-B.h)

      * NOTE: be CAREFUL of when creating polygon fixtures

        - a LIMIT OF 8 VERTICES PER POLYGON by default (if you need more you can adjust the value b2_maxPolygonVertices in the file b2Settings.h)
        - vertices must be specified in COUNTER-CLOCKWISE ORDER
        - vertices must describe a CONVEX POLYGON

      * INTERESTING NOTE: if fixture density is not specified, body / fixture WILL NOT ROTATE in response to mouse grab in the box2d test harness; not sure if this is expected behavior


      Friction (iforce-FooTest-C.h)

        * "When two fixtures collide with each other, the RESULTING FRICTION TENDS TOWARD THE LOWER OF THEIR FRICTION VALUES."


      Restitution

        - How "bouncy" a fixture is.
        * "When two fixtures collide with each other, the RESULTING RESTITUTION TENDS TOWARD THE HIGHER OF THEIR RESTITUTION VALUES."


      Changing fixture attributes at RUN-TIME

        - use <fixture> ->SetDensity(), ->SetRestitution(), ->SetFriction()
        * NOTE: setting density also requires a call to ResetMassData() on the body of the fixture


      Iterating over fixtures in a body

        - use <body> ->GetFixtureList() to get the first element in a linked list; for multiple fixtures use this in a for loop


  IFORCE2D C++ BOX2D TEST HARNESS

    - I created this simple physics scenario in the RUBE editor (2 bodies connected via a rotating joint) and exported the scene to c++. from there, I literally copy-and-pasted the code into this Box2D test class constructor - this worked without any problems (iforce-BarTest.h).

    * NOTE: while this test run validated RUBE-to-C++, the .cpp code generated is OVERLY VERBOSE and very NON-DESCRIPTIVE FROM A CODE EDITING STANDPOINT (naming isn't maintained and there aren't any comments to help either). for complex RUBE scenes this might be a problem, but my scenes are probably simple enough to get away with using direct export to C++.

----------
Thursday 2019-05-16

  IFORCE2D TUTORIALS

    - learning how to use RUBE editor with box2d scenarios AND put these them into the box2d test harness

    * NOTE: to add new tests to the box2d test harness REQUIRES opening and modifying the source code in some type of editor and recompiling .. ending up using visual studio 2019

    BOX2D BODY TYPES
      DYNAMIC - affected by gravity, linear/angular velocity, collides w/ all bodies (unless specified otherwise)
      STATIC - unaffected by gravity, position/angle can be set, but doesn't move
      KINEMATIC - unaffected by gravity, linear/angular velocity, does not collide with static bodies

    - @ "Box2D C++ tutorials - Fixtures" : http://www.iforce2d.net/b2dtut/fixtures

----------
Wednesday 2019-05-15

  IFORCE2D VIDEOS AND TUTORIALS

    - added videos and tutorial items to my TODO list
    - @ "Box2D C++ tutorials - Making a test" : http://www.iforce2d.net/b2dtut/making-a-test


  COCOS2D-X PREBUILT LIBS (comments)

    - I'm just revisiting this topic. In my windows 10 dev environment, the build time is reasonable, even for fresh builds. subsequent builds are even faster, but I guess this could always be faster. it might even save disk space (not sure about this though). marked as a TODO item with a more recent solution using cmake (see cocos2D-x.txt).

    - previously this broke in my crouton environment when trying to upgrade android studio a while back; I ended up having to roll back and lock down the software versions for android studio / cocos2D-x


  DOCUMENTATION
    x cocos2D-x.txt
    x Box2D.txt
    x Build Android Games.txt

    x Cocos2d-x by Example.txt (DELETE)
      - not much here at all.. deleting this
      - more specific info is recorded in various journal entries

    x project ideas.txt (NEW)
      - central location to track current project(s) and ideas
      - TODO ongoing; I only created a placeholder document at the moment

    x books.txt (NEW)
      - central location to track cocos2d-x book reading and chapter summary, chapters completed, etc.
      - TODO ongoing; only a skeleton at the moment
    
    x topics - main.txt (DELETE)
      - barely useful and hard to maintain

----------
Tuesday 2019-05-14

  - NOTES FROM HIKE
    - custom app from animated gifs.. add sound file; loop option; pre-made and custom

    - TODO: re-org and consolidate journal notes into a monthly format

    *** TODO: FROM NOW ON USE VS CODE PRINT MONTHLY JOURNAL TO PDF AND MARKUP USING ANDROID APP "XODO" ***
      - highlight / comment journal sections when going back over them; to make certain sections stand out and over time I learn new things that might be highly relevant

  - finished reading through old journal entries

----------
Monday 2019-05-13

  NOTES FROM ATL DRIVE
    - happy face emojis accelerometer react bouncing, circular spring also
    - hello kitty (if hawaii app actually does well), kimono @ megamart, grass skirt, etc. look at IP licensing..
    - fortnite dancing - not sure about this one..
    - swaying feet, sandals (hawaiian), alternate theme also - other graphics: user replaceable (baby feet), generic baby footprint, linux gnome bare feet, dog paws x 4
    - t-rex google page not found: 1) dinosaur reacts to accelerometer jumping with background just always scrolling OR 2) background moves in relation to accelerometer
    - monster truck similar to dinosaur scenario; physics on truck, 2D OR pseudo-3D, obstacles (cars, boulders), varying terrain

    - accelerometer toy "themes"
      - each theme need 3-5+ toys I think
      - many bobble toys could be incorporated in more than one theme
      - flower power: solar powered dancing flower, hawaiian lei, research popular flowers "jostled around", water lilies, hummingbird, butterfly resting, kindergarten style, sunflower, different flowers floating on water
        - hummingbird: it "floats", flapping wings, flying around to flower movement
      - spinning things: pinwheel (very light, little friction), windmill (holland, physics heavier), wind farm, car wheel, gears, fidget spinner, shuriken
      - hawaiian: +android robot w/ hawaiian shirt, lei, hula skirt, different poses
      - cute baby animals: a lot of possibilies in similar poses
      - food: stacked hamburger (ingredients stack flop), pizza; advertising graphics geared toward businesses
      - christian: buddy jesus, air jesus, christian fish, cross on a chain
        - religion is very touchy though..
      - japan: cherry blossoms in water, sumo wrestler, geisha dancer, shuriken spinning

      - user-customizable graphics in pre-made physics templates: braves tomahawk chopping + logo, hula dancer face or face cutout, circular spring, animation; avoids IP issues
        - animation moving from user tap or accelerometer, individual graphic frames or an animated gif specified by user
          - animation speed remains consistent and always finishes on last frame(?)
          - simplified animation speed control, rotation in 90 degree steps
          - ex. muybridge horse, many on the internet, skull spinning, selfie(s)
    
    - simulated water: boat, boat in a bottle, rubber duck
    - full skeleton on a chain, joints connected; theme?
    - morning star on a chain (weapons theme?)
    - leaning tower of pisa
    - hand-drawn art might be a good idea; cuphead video gave me inspiration to develop my own "style" - art styles alone can be a primary appeal to users

    - bobble toys should have the ability to "auto-wobble" or respond to touch / touch-drag; in stationary environments this would be good
    - android day dream (still a thing?), live wallpaper: would be appealing to many and would respond to swipes; panda live wallpaper gave me inspiration for this - very simplistic movement, but art style and functionality generated many downloads
    * drive to ATL got brainstorming about this subconciously; it might be a good idea to just drive around to get new ideas and audio recorded

  OLD NOTES / JOURNAL ENTRIES
    - I need to "catch up" on my dev history, since I took such a long break from this (mostly because of the move and dev environment change)
    - I started journaling since 2018-10-07
    - this is about 7.5 months; a total ~71 days ..out of 219 based on my calendar entries -> 32%

    - looking back on the initial chipmunk physics tests (2018-12-05), this was very error-prone as this was pretty much code trial-and-error; I'm not exactly sure how much of this was issues related to chipmunk per se, but even with code-only box2d implementations, this was tedious. the R.U.B.E. editor should really go far streamlining physics implementations..

----------
Sunday 2019-05-12

  - just experimenting with R.U.B.E. joints and attempting to visually understand joint basic operation
  - UNFORTUNATELY, there are no pre-built "springs" and I have to work with the joint types provided
  - at the moment, it appears that "wheel" joints are closest to what I want as far as creating spring oscillating effects
    - "wheel" @ ~ frequency < 4 and damping ratio < 0.5 (last f=1, dr=0.03)

----------
Thursday 2019-05-09

  - R.U.B.E. video tutorials continued
    - a lot of information and time-consuming to watch all the videos..

  - R.U.B.E. iforce2d has a bunch of c++ box2d tutorials
    - http://www.iforce2d.net/b2dtut/introduction

----------
Wednesday 2019-05-08

  - R.U.B.E. video tutorials

    - though there are some free tools that accomplish similar goals, this seems the most feature complete, maintained and well made; considering my end goals, this will probably be an essential tool

    - watch video tutorials

      * RE-WATCH especially the joint video tutorials
      - video tutorials were recorded in 2012 and additional features have been added
      - original joint types include: REVOLUTE, PRISMATIC, DISTANCE, WHEEL, ROPE
      - new joint types are: WELD, FRICTION, MOTOR

      * TODO (2): create a file with different types of joints and "play" with settings (TAKE NOTES)
        - implementing something like an axis-constrained SPRING isn't exactly 1-to-1, it has to be finagled.. a distance joint with frequency and damping set I think and even then, it's not constrained to any axis. this is more of a box2d thing, but I'm not sure if it's a "limitation" per se

      * TODO (3): TAKE NOTES OF EACH TYPE OF JOINT AND WHAT THEY DO IN MY OWN WORDS

  - TODO (1):
    - finish watching video tutorials
    - install keepassx, update iforce2d password
    - install paid version of R.U.B.E. and loaders

----------
Monday 2019-05-06

  - changed github password and enabled 2-factor authentication

  - installed texturepacker and physicseditor

  - downloaded latest Box2D sdk
    - successfully compiled and ran the Box2D Testbed application (NOT SURE WHAT TO DO WITH THIS AT THE MOMENT HOWEVER)

  - VISUAL STUDIO 2019 (free) had to be installed to compile the Box2D Testbed
    - quite a large install, but now I'm able to use this for general purpose c++ and COCOS CREATOR was also installed as an option

  - next I need to find a good Box2D editor to better visualize some of the 2d physics scenarios I'm trying to create
    - R.U.B.E. ($35): https://www.iforce2d.net/rube/
    - installing the trial version 1st and try some tutorials

  - created a restore point and disk image (macrium reflect)

----------
Sunday 2019-05-05

  - created macrium reflect boot usb drive and verified that I can boot from this and restore macrium disk images if necessary

  - trying to resolve issue with "celestial" cocos2d-x/box2d project not working correctly
    - template project appears to work ok, even with windows softlink for cocos2d directory

    - resolution actions:
      - try another box2d project
        - air_hockey from portable drive backup; using softlink cocos2d and Android.mk modification
        - gradle plugin always has to be updated it seems and another warning given, otherwise pre-build is ok
        - fresh build: 2m 37s
        - THIS WORKS!! ..I don't think cocos2d-x needs to be re-installed

      - create/test "celestial" box2d project not using github
        - THIS WORKS ALSO!!

      - create/test "celestial" box2d project in old environment using github source
        - FALSE ALARM
        - straight away I noticed that MenuSelect.h/.cpp wasn't part of my local backup; basically the menu select scene isn't working and gave the appearance of box2d not working, this and also compounded by the fact I moved to a new dev environment
        * github version of the code was fixed/completed by referring back to sample from "android_games" project menu implementation

  - relocating cocos2d-x sdk, altered templates and tested ok

  - keep the crouton development environment for now without upgrading cocos2d-x, android/gradle

  * NOTE: each android studio project is quite LARGE, almost 2GB once built

  - NEXT: continue on with software installs from Wednesday 2019-05-01

----------
Friday 2019-05-03

  - continue software installs
    - cocos2d-x version 3.17.1 downloaded and windows symlinks created
      - windows 10 allows creating symlinks in a similar fashion to linux, saving space by creating a "cocos2d" link
      
      * NOTE: SYMLINKS CREATED IN WINDOWS have subtle differences compared to linux, and REQUIRE ABSOLUTE FILEPATHS

    - updated android ndk
    - install python 2.7.x (cocos2d-x prerequisite)

  - added existing cocos2d project (celestial) to github from crouton/linux to windows 10 environment

    * NOTE 1: need to modify line of "proj.android > gradle.properties" (project error)
      PROP_BUILD_TYPE=ndk-build

    * NOTE 2: project path needs to avoid spaces (project error)

    * NOTE 3: android.mk has to be modified to match that of the cocos2d-x template project (.cpp files included properly)

    - "celestial" project compiles and installs .apk file, but doesn't do anything
      - default cocos2d-x template project works fine, though

  - try rebuilding another box2d project from crouton/linux in windows 10

----------
Wednesday 2019-05-01

  - windows software stack:
    x chrome browser
    x visual studio code
    x git
    x android studio
    x android ndk c++
    x cocos2d-x
    x texturepacker, physicseditor..
    - box2d software