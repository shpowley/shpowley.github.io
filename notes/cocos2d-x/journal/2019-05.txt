----------
Friday 2019-05-24

  GOALS
    - RUBE tutorials: NEXT
    - watch RUBE tutorial vid #X and take notes - NEXT

----------
Thursday 2019-05-23

  GOALS
    - continue with b2djson loader: android custom project
      - continue notes on "Wednesday 2019-05-22"

    - cocos2d-x
      - https://youtu.be/ePTR5lHE4q0
      - https://www.iforce2d.net/rube/?panel=loaders

    - peruse main TODO list
    - RUBE tutorials: user data - http://www.iforce2d.net/b2dtut/user-data
    - watch RUBE tutorial vid #5 and take notes - https://youtu.be/1UUHSezu96g

----------
Wednesday 2019-05-22

  b2djson LOADERS

    *** http://www.iforce2d.net/b2djson/
      - programming usage case examples and reference


    B2DJSON LOADER: COCOS2D-X / BOX2D

      - the default "sampleLoaders" directory didn't have the latest cocos2d-x sample; the latest is v3.4


      ANDROID/COCOS2D-X PROJECT SAMPLE PROJECT

        !! WOW - THIS COMPILED AND WORKED ON THE FIRST ATTEMPT !! I was very surprised

        - GOOD PERFORMANCE, PINCH-TO-ZOOM FEATURE on some demos
        - IMAGES ALSO LOADED using b2djson
        - BOX2D MOUSE JOINT feature
        - simple UI CONTROLS demo (useful?)
        - physics draw layer

        - simple menu demo didn't really do anything though..

        COMMENT: with IMAGES ABLE TO LOAD DIRECTLY WITH B2DJSON and VERTEX EDITING IN RUBE, I almost didn't need to purchase texturepacker (though the spritesheet feature will be necessary down the road)


      ANDROID/COCOS2D-X PROJECT TO TEST CUSTOM JSON CREATED IN RUBE EDITOR

        - studying BasicRUBELayer.cpp/.h to get a feel for how to load my custom/simple RUBE json file. this is definitely the file I want to be looking at, however, after browsing this code, I'VE NOTICED SEVERAL IMPORTANT THINGS

          - I'm not sure if the technique using PTM_RATIO can be used as in the celestial project; BasicRUBELayer.cpp/.h provides worldToScreen() and screenToWorld() methods

          * DEBUGDRAW INCLUDE FILES AND IMPLEMENTATIONS ARE VASTLY DIFFERENT across the many projects I've looked at so far..
            -I've found several different versions with similar function signatures: celestial project (GLES-Render.h/.cpp), rube_loader_demo (Box2DDebugDraw.h/.cpp), iOS (GLES1DebugDraw.h/.cpp), etc.
            - I'm going to at least try using the Box2D Testbed Framework files "DebugDraw.cpp" and "DebugDraw.h" from now on as these are closest to official(?) and fallback to the ones provided with the loader samples

        HERE


    B2DJSON LOADER: WINDOWS BOX2D TEST HARNESS

      - copied b2dson from one of the loader examples into SDK/RUBE-b2djson folder
        - each example appears to use the same source files

      - created a link using MS mklink and moved this to SDK\Box2D\Testbed\Tests folder

      - I had to FIX the following:
        - b2dJsonImage_OpenGL .h/.cpp were NOT INCLUDED in the visual studio project heirarchy to prevent compile errors

        - b2dJson.cpp
          int32 vertexCount = poly->GetVertexCount();  HAD TO BE CHANGED TO
          int32 vertexCount = poly->m_count;

          ->GetVertexCount() appears to be deprecated in Box2D 2.3.2

          NOTE:
            - m_count is the # of vertices in b2Polygon only
            - for something like b2Vec2 arrays, however, use SIZE OF ARRAY calculation = sizeof(<b2Vec2 array>) / sizeof(b2Vec2 element);

----------
Tuesday 2019-05-21

  MISC

    - sidetracked adding TODO items for integrating latest box2d to cocos2d-x and removing chipmunk
    - fill in "project ideas.txt" and try to sort by themes


  IFORCE2D TUTORIALS

    * NOTE: I can't really test these projects ("using debug draw" AND "drawing your own objects") because of the same reason given in the tutorial "rotating to a given angle". I think either there is something wrong my development environment or the opengl api calls used in these tutorials are deprecated from an older version of opengl (not sure exactly)


    "using debug draw" (CODE EXAMPLE SKIPPED)

      * I noticed that debug draw features seemed identical to gles-render.h/.cpp, which prompted me to consider upgrading the box2d bundled into cocos2d-x

      *** NOTE: refer to Box2D Testbed/Framework/Test.cpp for a good detailed code usage example

      - basically, this shows how to subclass "DebugDraw" (I honestly don't think I'll be doing this)

      - don't forget to set the drawing flags for the type of visibility of elements desired (shapes, connections, aabb, broad-phase pairs, center-of-mass)


    "drawing your objects" (CODE EXAMPLE SKIPPED)

      - basically, drawing shapes independent of debug draw for an example game-entity


  B2SPRITE (CELESTIAL PROJECT)

    - my custom b2Sprite inherits from the cocos2d-x Sprite, overriding positioning functions to keep the box2d and sprite object positions in-sync
      
      Asteroid < b2Sprite < Sprite (cocos2d-x)

    - for my asteroid test, everything seems to match up on the center of the sprite and box2d body, however, I'm not sure of the alignment for physics bodies with multiple fixtures

    - the debug draw acts independently of the b2Sprite and visibility isn't controlled at a granular object level - it's more of an application-level on/off, but that's probably fine

      * however, the default position will be (0, 0) and even for hidden objects, the physics debug will still render at that position


    RUBE INIT

    - in b2Sprite-based objects, the physics body is defined in the creation/init

    - I think the RUBE definitions can be loaded in the scene load (1), then the bodies created as pointer definitions (2), initialized bodies passed into the create method, similar to the container physics layer (3)


----------
Monday 2019-05-20

  BOX2D TEST HARNESS

    - randomly looking at pre-built tests for ideas and code show-and-tell
      - slider crank - locomotive
      * cantilever - hula spring, floating dragon or fish
      - car - great for vehicle project ideas (camera for box2d?)
      - body types - body type can be changed at run-time
      - chain vs rope joint
      - breakable
      - bridge - vehicle projects
      - theo jansen's walker - mech walkers
      - web - spider web + spider


  MISC
    - re-read journal entries for this month
    - re-watched RUBE tutorial vid #3 and take notes


  PROJECT IDEAS

    - I thought of these earlier today. I mentioned a monster truck with scrolling background.
      - along the same lines, I thought of "moon patrol" from way back during the atari 2600, but variations on that. a space land rover with a moon landscape and moon-like gravity..
      - similarly, a old style train locomotive. this would be interesting as it many moving parts, the tracks/terrain has to flat. the terrain+vehicle+camera needs to be brainstormed.
      - stunt car / motorcycle / skateboarder
      - mech walker / imperial walker
      - tank


  IFORCE2D TUTORIALS

    NOTE: all iforce2d tutorials are done on the box2d source code, specifically in the test harness


    "Rotating a body to a given angle" (iforce-RotationTest.h)

      - similar to last topic, using angles instead of linear movement
      - rotation accomplished by using transform, torque, or impulse

      - opengl calls to draw a "dot" didn't work at all - these api calls exist in <gl/GL.h>, but were inaccessible after a few attempts and I gave up; I ended up using "g_debugDraw.DrawCircle"

      - COMMENT #1: these methods are somewhat involved; LOOK AT THE CODE COMMENTS

      - COMMENT #2: though I can't be sure of this without further testing, the impulse technique should be operate outside the Step() function, similar to the linear impulse

    
    "Jumping" (iforce-JumpTest.h)
    
      - linear y-velocity, y-force over # time steps, impulse, or prismatic joint
      - pros/cons of each

----------
Sunday 2019-05-19

  ESKIMO ACCELEROMETER IMPLEMENTATION

    * see journal "Wednesday 2019-01-23", section "ACCELEROMETER" (fairly good explanation) AND GameLayer.cpp in Eskimo code

    * today's iforce2d tutorials ("custom gravity" and "constant speed") seem highly relevant

      COMMENTS:
      
        - maybe world->SetGravity() in response to the accelerometer to affecting all box2d objects(?) in the Step() function

        OR

        - body->ApplyForce(b2Vec2(mass * acc.x, mass * acc.y), ...) on individual box2d objects(?) in response to the accelerometer in the Step() function

    - cocos2d-x is limited to ACCELERATION+GRAVITY ONLY without using JNI TO ACCESS OTHER SENSOR DATA OR using the pseudo LINEAR ACCELERATION TRICK as in the javascript hula/piggly wiggly project

      COMMENTS:

        - JNI for other sensors might be good and also for obtaining light sensor readings
        - what about Apple iOS and linear acceleration and light sensor data?? (in the distant? future)


  IFORCE2D TUTORIALS

    * NOTE: keyboard override function signature has changed

    "custom gravity" on specific objects (iforce-GravityTest.h)
      ->ApplyForce() with negative gravity in Step() function
      ->SetGravityScale() : 0 = cancel, -1 reverse (NEW, easier syntax and set outside Step() function)

    "constant speed" (iforce-SpeedTest.h)
      - gradual vs instant speed comparisons
      + more complex speed implementations using force (not in code test)

----------
Saturday 2019-05-18

  * based on observation, I think loading RUBE JSON definitions would probably be best. it's a bit more work, I think, but offers flexibility and hopefully it will be easier to identify objects


  MISC

    - journal moved to monthly format
    - re-watched RUBE tutorial vid #1 and take notes (new document RUBE.txt)

    * ASTEROID box2d/cocos2D-x/android project is the template for building my apps

      - see AsteroidScene .cpp/.h | AsteroidScene::init() AND PhysicsLayer .cpp/.h
      - multiple layers on a scene (with separate layers for physics and associated sprite objects)
      - box2d PHYSICS DEBUG DRAW functionality (see common.h for #define flags)

    COCOS2D_DEBUG

      - used in CCLOG(), this needs to be modified in the Application.mk

        APP_CPPFLAGS += -DCOCOS2D_DEBUG=1


  IFORCE2D TUTORIALS

    world settings

      ->setGravity() can change world gravity at run-time

      ->Step() advances the world physics simulation
        * recommended to set the iterations as low as possible, especially low # of physics bodies / collisions
        - # of iterations only specify an UPPER LIMIT, box2d can actually use less
      
      - delete world as normally done for c++ pointers

      iforce-ForceTest.h
        - code sample shows how to override test harness keyboard input method
        - 3 bodies demonstrating ApplyForce, ApplyImpulse, Transform, ApplyTorque, ApplyAngularImpulse

----------
Friday 2019-05-17

  - I'm guessing around the end of May to complete these tutorials (not counting the advanced tutorials)


  IFORCE2D TUTORIALS

    "Fixtures" tutorial (iforce-FooTest-B.h)

      * NOTE: be CAREFUL of when creating polygon fixtures

        - a LIMIT OF 8 VERTICES PER POLYGON by default (if you need more you can adjust the value b2_maxPolygonVertices in the file b2Settings.h)
        - vertices must be specified in COUNTER-CLOCKWISE ORDER
        - vertices must describe a CONVEX POLYGON

      * INTERESTING NOTE: if fixture density is not specified, body / fixture WILL NOT ROTATE in response to mouse grab in the box2d test harness; not sure if this is expected behavior


      Friction (iforce-FooTest-C.h)

        - "When two fixtures collide with each other, the resulting friction tends toward the lower of their friction values."


      Restitution

        - How "bouncy" a fixture is.
        - "When two fixtures collide with each other, the resulting restitution tends toward the higher of their restitution values."


      Changing fixture attributes at run-time

        - use <fixture> ->SetDensity(), ->SetRestitution(), ->SetFriction()
        * NOTE: setting density also requires a call to ResetMassData() on the body of the fixture


      Iterating over fixtures in a body

        - use <body> ->GetFixtureList() to get the first element in a linked list; for multiple fixtures use this in a for loop


  IFORCE2D C++ BOX2D TEST HARNESS

    - I created this simple physics scenario in the RUBE editor (2 bodies connected via a rotating joint) and exported the scene to c++. from there, I literally copy-and-pasted the code into this Box2D test class constructor - this worked without any problems (iforce-BarTest.h).

    * NOTE: while this dry test run proved RUBE-to-C++, the .cpp code generated is overly verbose and very non-descriptive from a code editing standpoint (naming isn't maintained and there aren't any comments to help either). for complex RUBE scenes this might be a problem, but my scenes are probably simple enough to get away with using direct export to C++.

----------
Thursday 2019-05-16

  IFORCE2D TUTORIALS

    - learning how to use RUBE editor with box2d scenarios AND put these them into the box2d test harness

    * NOTE: to add new tests to the box2d test harness REQUIRES opening modifying the source code in some type of editor and recompiling
      - visual studio 2019 was used

    BOX2D BODY TYPES
      DYNAMIC - affected by gravity, linear/angular velocity, collides w/ all bodies (unless specified otherwise)
      STATIC - unaffected by gravity, position/angle can be set, but doesn't move
      KINEMATIC - unaffected by gravity, linear/angular velocity, does not collide with static bodies

    - @ "Box2D C++ tutorials - Fixtures" : http://www.iforce2d.net/b2dtut/fixtures

----------
Wednesday 2019-05-15

  IFORCE2D VIDEOS AND TUTORIALS

    - added videos and tutorial items to my TODO list
    - @ "Box2D C++ tutorials - Making a test" : http://www.iforce2d.net/b2dtut/making-a-test


  COCOS2D-X PREBUILT LIBS (comments)

    - I'm just revisiting this topic. In my windows 10 dev environment, the build time is reasonable, even for fresh builds. subsequent builds are even faster, but I guess this could always be faster. it might even save disk space (not sure about this though). marked as a TODO item with a more recent solution using cmake (see cocos2D-x.txt).

    - previously this broke in my crouton environment when trying to upgrade android studio a while back; I ended up having to roll back and lock down the software versions for android studio / cocos2D-x


  DOCUMENTATION
    x cocos2D-x.txt
    x Box2D.txt
    x Build Android Games.txt

    x Cocos2d-x by Example.txt (DELETE)
      - not much here at all.. deleting this
      - more specific info is recorded in various journal entries

    x project ideas.txt (NEW)
      - central location to track current project(s) and ideas
      - TODO ongoing; I only created a placeholder document at the moment

    x books.txt (NEW)
      - central location to track cocos2d-x book reading and chapter summary, chapters completed, etc.
      - TODO ongoing; only a skeleton at the moment
    
    x topics - main.txt (DELETE)
      - barely useful and hard to maintain

----------
Tuesday 2019-05-14

  - NOTES FROM HIKE
    - custom app from animated gifs.. add sound file; loop option; pre-made and custom

    - TODO: re-org and consolidate journal notes into a monthly format

    * TODO: from now on use vs code print monthly journal to pdf and markup using android app "xodo"
      - highlight / comment journal sections when going back over them; to make certain sections stand out and over time I learn new things that might be highly relevant

  - finished reading through old journal entries

----------
Monday 2019-05-13

  - NOTES FROM ATL DRIVE
    - happy face emojis accelerometer react bouncing, circular spring also
    - hello kitty (if hawaii app actually does well), kimono @ megamart, grass skirt, etc. look at IP licensing..
    - fortnite dancing - not sure about this one..
    - swaying feet, sandals (hawaiian), alternate theme also - other graphics: user replaceable (baby feet), generic baby footprint, linux gnome bare feet, dog paws x 4
    - t-rex google page not found: 1) dinosaur reacts to accelerometer jumping with background just always scrolling OR 2) background moves in relation to accelerometer
    - monster truck similar to dinosaur scenario; physics on truck, 2D OR pseudo-3D, obstacles (cars, boulders), varying terrain

    - accelerometer toy "themes"
      - each theme need 3-5+ toys I think
      - many bobble toys could be incorporated in more than one theme
      - flower power: solar powered dancing flower, hawaiian lei, research popular flowers "jostled around", water lilies, hummingbird, butterfly resting, kindergarten style, sunflower, different flowers floating on water
        - hummingbird: it "floats", flapping wings, flying around to flower movement
      - spinning things: pinwheel (very light, little friction), windmill (holland, physics heavier), wind farm, car wheel, gears, fidget spinner, shuriken
      - hawaiian: +android robot w/ hawaiian shirt, lei, hula skirt, different poses
      - cute baby animals: a lot of possibilies in similar poses
      - food: stacked hamburger (ingredients stack flop), pizza; advertising graphics geared toward businesses
      - christian: buddy jesus, air jesus, christian fish, cross on a chain
        - religion is very touchy though..
      - japan: cherry blossoms in water, sumo wrestler, geisha dancer, shuriken spinning

      - user-customizable graphics in pre-made physics templates: braves tomahawk chopping + logo, hula dancer face or face cutout, circular spring, animation; avoids IP issues
        - animation moving from user tap or accelerometer, individual graphic frames or an animated gif specified by user
          - animation speed remains consistent and always finishes on last frame(?)
          - simplified animation speed control, rotation in 90 degree steps
          - ex. muybridge horse, many on the internet, skull spinning, selfie(s)
    
    - simulated water: boat, boat in a bottle, rubber duck
    - full skeleton on a chain, joints connected; theme?
    - morning star on a chain (weapons theme?)
    - leaning tower of pisa
    - hand-drawn art might be a good idea; cuphead video gave me inspiration to develop my own "style" - art styles alone can be a primary appeal to users

    - bobble toys should have the ability to "auto-wobble" or respond to touch / touch-drag; in stationary environments this would be good
    - android day dream (still a thing?), live wallpaper: would be appealing to many and would respond to swipes; panda live wallpaper gave me inspiration for this - very simplistic movement, but art style and functionality generated many downloads
    * drive to ATL got brainstorming about this subconciously; it might be a good idea to just drive around to get new ideas and audio recorded

  - OLD NOTES / JOURNAL ENTRIES
    - I need to "catch up" on my dev history, since I took such a long break from this (mostly because of the move and dev environment change)
    - I started journaling since 2018-10-07
    - this is about 7.5 months; a total ~71 days ..out of 219 based on my calendar entries -> 32%

    - looking back on the initial chipmunk physics tests (2018-12-05), this was very error-prone as this was pretty much code trial-and-error; I'm not exactly sure how much of this was issues related to chipmunk per se, but even with code-only box2d implementations, this was tedious. the R.U.B.E. editor should really go far streamlining physics implementations..

----------
Sunday 2019-05-12

  - just experimenting with R.U.B.E. joints and attempting to visually understand joint basic operation
  - UNFORTUNATELY, there are no pre-built "springs" and I have to work with the joint types provided
  - at the moment, it appears that "wheel" joints are closest to what I want as far as creating spring oscillating effects
    - "wheel" @ ~ frequency < 4 and damping ratio < 0.5 (last f=1, dr=0.03)

----------
Thursday 2019-05-09

  - R.U.B.E. video tutorials continued
    - a lot of information and time-consuming to watch all the videos..

  - R.U.B.E. iforce2d has a bunch of c++ box2d tutorials
    - http://www.iforce2d.net/b2dtut/introduction

----------
Wednesday 2019-05-08

  - R.U.B.E. video tutorials

    - though there are some free tools that accomplish similar goals, this seems the most feature complete, maintained and well made; considering my end goals, this will probably be an essential tool

    - watch video tutorials

      * RE-WATCH especially the joint video tutorials
      - video tutorials were recorded in 2012 and additional features have been added
      - original joint types include: REVOLUTE, PRISMATIC, DISTANCE, WHEEL, ROPE
      - new joint types are: WELD, FRICTION, MOTOR

      * TODO (2): create a file with different types of joints and "play" with settings (TAKE NOTES)
        - implementing something like an axis-constrained SPRING isn't exactly 1-to-1, it has to be finagled.. a distance joint with frequency and damping set I think and even then, it's not constrained to any axis. this is more of a box2d thing, but I'm not sure if it's a "limitation" per se

      * TODO (3): TAKE NOTES OF EACH TYPE OF JOINT AND WHAT THEY DO IN MY OWN WORDS

  - TODO (1):
    - finish watching video tutorials
    - install keepassx, update iforce2d password
    - install paid version of R.U.B.E. and loaders

----------
Monday 2019-05-06

  - changed github password and enabled 2-factor authentication

  - installed texturepacker and physicseditor

  - downloaded latest Box2D sdk
    - successfully compiled and ran the Box2D Testbed application (NOT SURE WHAT TO DO WITH THIS AT THE MOMENT HOWEVER)

  - VISUAL STUDIO 2019 (free) had to be installed to compile the Box2D Testbed
    - quite a large install, but now able to use this for general purpose c++ and COCOS CREATOR also installed as an option

  - next I need to find a good Box2D editor to better visualize some of the 2d physics scenarios I'm trying to create
    - R.U.B.E. ($35): https://www.iforce2d.net/rube/
    - installing the trial version 1st and try some tutorials

  - created a restore point and disk image (macrium reflect)

----------
Sunday 2019-05-05

  - created macrium reflect boot usb drive and verified that I can boot from this and restore macrium disk images if necessary

  - trying to resolve issue with "celestial" cocos2d-x/box2d project not working correctly
    - template project appears to work ok, even with windows softlink for cocos2d directory

    - resolution actions:
      - try another box2d project
        - air_hockey from portable drive backup; using softlink cocos2d and Android.mk modification
        - gradle plugin always has to be updated it seems and another warning given, otherwise pre-build is ok
        - fresh build: 2m 37s
        - THIS WORKS!! ..I don't think cocos2d-x needs to be re-installed

      - create/test "celestial" box2d project not using github
        - THIS WORKS ALSO!!

      - create/test "celestial" box2d project in old environment using github source
        - FALSE ALARM
        - straight away I noticed that MenuSelect.h/.cpp wasn't part of my local backup; basically the menu select scene isn't working and gave the appearance of box2d not working, compounded by moving to a new dev environment
        * github version of the code was fixed/completed by referring back to sample from "android_games" project menu implementation

  - relocating cocos2d-x sdk, altered templates and tested ok

  - keep the crouton development environment for now without upgrading cocos2d-x, android/gradle

  * NOTE: each android studio project is quite LARGE, almost 2GB once built

  - NEXT: continue on with software installs from Wednesday 2019-05-01

----------
Friday 2019-05-03

  - continue software installs
    - cocos2d-x version 3.17.1 downloaded and windows symlinks created
      * NOTE: SYMLINKS CREATED IN WINDOWS have subtle differences compared to linux, and REQUIRE ABSOLUTE FILEPATHS
    - updated android ndk
    - install python 2.7.x (cocos2d-x prerequisite)

  - added existing cocos2d project (celestial) to github from crouton/linux to windows 10 environment

    * NOTE 1: need to modify line of "proj.android > gradle.properties" (project error)
      PROP_BUILD_TYPE=ndk-build

    * NOTE 2: project path needs to avoid spaces (project error)

    * NOTE 3: android.mk has to be modified to match that of the cocos2d-x template project (.cpp files included properly)

    - "celestial" project compiles and installs .apk file, but doesn't do anything
      - template project works fine, though

  - windows 10 allows creating symlinks in a similar fashion to linux, saving space by creating a "cocos2d" link

  - try rebuilding another box2d project from crouton/linux in windows 10

----------
Wednesday 2019-05-01

  - windows software stack:
    x chrome browser
    x visual studio code
    x git
    x android studio
    x android ndk c++
    x cocos2d-x
    x texturepacker, physicseditor..
    - box2d software