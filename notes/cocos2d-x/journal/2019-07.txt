----------
Wednesday 2019-07-31

  layer overlay tests

----------
Tuesday 2019-07-30

  data persistence

    - leaning toward fileutils and .plist/xml; see cocos2d-x cookbook and google
    - complete for app settings read/write; needs some testing


    CODE REFERENCE

      map_parent = {
        {"KEY A", Value(true)},
        {"KEY B", Value(121)}
        {"KEY C", Value(map_inner_A)}
        {"KEY D", Value( ValueMap{ {"key", Value(2)}, {"key next", Value(345)} })},
        {"KEY E", Value( ValueVector{ Value(2), Value(3), Value(31) })},
      };

      file_utils->writeToFile(map_parent, full_path_file);


    WRITEABLE PATH: FileUtils::getInstance()->getWriteablePath()

----------
Monday 2019-07-29

  auto-wobble
    * HUNG UP ON THE SANDALS IMPLEMENTATION; encountered an ODD BUG(?) is very finicky with applying different torque values to each foot.. used a workaround I guess..
      - hopefully this is isolated won't cause issues in the future

    - scene-specific settings with appropriate defaults is really needed; application-wide defaults isn't pretty on some scenes

    * had to copy joint defs AND re-create joints for a special case, BUT joint .SetFrequency() AND .SetDampingRatio() EXIST ..making using these easier for scene-specific settings later on

  settings
    - granular acceleration control

    * NOTE: removing 2 UI radio options.. ALL remaining UI elements are slider and checkboxes
    
----------
Sunday 2019-07-28

  - removed unneeded "test" scenes

  auto-wobble
    - mostly satisfied with motion and code implementation
    - removed "random" as it didn't make sense how best to implement
    - template in the HulaScene.h/.cpp
      ..will implement in other scenes tomorrow, but not sure about the turtles as the "auto-wobble" definition isn't as clear-cut for this physics layout

----------
Saturday 2019-07-27

  auto-wobble
    - basic concept implemented on 2 scenes
    * this needs to be customized for each scene as the number of dynamic physics bodies varies, but a code pattern has been established
    - "threshold angular velocity" needs to be added to the settings, in addition to refined ranges + steps, I think constants would be useful here
    - random auto-wobble needs to be added, but I'm not sure about the min/max values

  - after some observations driving around today, I think the movement settings need to be even more granular, yet at the same time, the UI needs to appear as simple as possible for the end user

    info boxes

    basic > advanced > advanced+ > developer ???

    accelerometer
      - the "induce torque" option needs to be moved back toward the top
      - accelerometer "force applied" also needs to be another option

    auto wobble
      - "threshold angular velocity" should be another option, but this has to be checked a level higher in the RUBE Scene/Layer child

    developer option
      - prevent linear acceleration negating physics body angular movement

----------
Friday 2019-07-26

  SETTINGS: ACCELEROMETER-INDUCED TORQUE

    - added; off by default; additional "rotation" force induced by the accelerometer; does not override gyroscope torque, nor the accelerometer force
    - needed for scenarios like the moto-g / "hang loose" scene - due to the lack of a gyro AND the center of mass on the joint

  AUTO-WOBBLE

    - began implementation with on-screen logging of relevant information
      - display: ACCELERATION X/Y/Z, GYRO Z-AXIS and ANGULAR VELOCITY
      * I think ANGULAR VELOCITY might be the best statistic to use to determine if a toy is idle

----------
Thursday 2019-07-25

  - more efficient RUBELayer::setImagePositionsFromPhysicsBodies()

  - SETTINGS: "normalized acceleration x/z" doesn't work with the normal accelerometer (acceleration + gravity)
    - restrictions set in code and settings ui

  - SETTINGS / DEVELOPER MODE: move sensor tests button here and update some supporting code

  - SETTINGS: mark sensors as unavailable where appropriate
    - gyro sensor label should be disabled and labeled " (Unavailable)"
    - accelerometer sensor - same as gyro, though I think accelerometer will always be available
    - linear accelerometer labeled " (Software)" if unavailable as this is calculated from acceleration low-pass filter

  - halt any negating accelerometer force opposing current x-axis (angular) velocity
    - this could only be implemented on the linear accelerometer; with the standard accelerometer the effects of gravity create an unwanted oscillation

----------
Tuesday 2019-07-23

  - remove "max acceleration x/z" option and related code

  - I'm guessing I have ~12 days before Jack gets here
  - time estimate to complete v1 ~34 days ===> mid-september?

  todo list consolidation

  transcribe audio notes
  
----------
Sunday 2019-07-21

  coding

    FIX #1: fixed issue with RUBELayer create parameter; basically I was passing in a reference to parameters that are no longer in scope - declared in the function instead of the class-module

    FIX #2:
      - also had to derive classes from RUBELayer in order to support FIX #2 ..specifically the "back" button
      - so each physics scene now has a corresponding Layer that inherits from RUBELayer - this was done on the HulaScene and then used as a template for the remaining scenes


  review my "TODO" items and consolidate

    - created a to-do folder with separate files for each version


  licensing? for future reference

    - hello kitty
      - sanrio

    - rilakkuma
      - https://www.ingram.co.jp/english/

----------
Saturday 2019-07-20

  coding

    - having trouble with creating parameters struct to pass into RUBELayer

----------
Friday 2019-07-19

  app settings

    - making RUBELayer use pointers instead
      - update all scenes to use "new" RUBELayerInfo
      - once fixed.. work on HangLooseLayer - needs create method

    - finished basic ui I think
    - TODO: I want a "secret" method to enable developer mode

----------
Thursday 2019-07-18

  app settings

    - settings for basic / advanced mostly complete for the ui
      - still need wobble / dev mode ui completed

    - sensor test added
      - TODO: some thought needs to into this though, scene or layer? hide for v1? as actual scene needs cleanup and BACK from current scene always go back to the main menu

----------
Wednesday 2019-07-17

  app settings
  - title panel + back button
  - footer panel + restore defaults button
  - advertisement panel (placeholder code) works enough to make space near the top
  - scrollview modified to fit between title and footer panels

----------
Tuesday 2019-07-16

  - good discussion on lambda functions
    https://discuss.cocos2d-x.org/t/lambda-functions/20160/9
    https://en.cppreference.com/w/cpp/language/lambda

    ex. back_button->addClickEventListener([&](cocos2d::Ref* sender) {
          CCLOG("BUTTON CLICKED!!!");
        });

  - placed settings title layout with back button graphic and title text
    - needs a better visual cue when pressing back
    - in the future this will need ad-placement layout adjustment; with a flexible scrollview height -- I think

  * as an "extra" visual interest add swimming turtles and / or hawaiian flowers application settings and main menu (later though)

----------
Monday 2019-07-15

  - re-org application settings layout (still need to implement)

  - created icons for android based on advice from this website:
    https://iconhandbook.co.uk/reference/chart/android/

  - changed the application title to "Dashboard Toys"
    - displays fully on the Note 4, but cuts it down to "Dashboard.." on the moto g
    - maybe rename it to "DashToys", "Dash Toys", "Desktop Toys", "Desk Toys", "Automotion", "Auto-Motion"

  - implemented a few app settings and NOTES: from test drive around town
    * app needs strong warning to not drive distracted ...however, PEOPLE MIGHT MESS WITH SETTINGS WHILE DRIVING
      - maybe another warning if going to settings and in fast motion + settings option to disable
    - larger icons for all ui controls
    - larger font (font size changeable in settings)

    - "max acceleration x/z" and "normalized acceleration x/z" don't really work well with the normal accelerometer (acceleration + gravity) - SHOULD BE DISABLED AND DEFAULTED TO X-AXIS MOTION IF NOT LINEAR

    - movement can be "jerky" at times (especially with high sensitivity, linear + x/z normalized)
      ? perhaps halting any negating accelerometer force opposing current x-velocity direction?

    - separate sensitivity slider for x, y, and z

----------
Sunday 2019-07-14

  CODING

    - finished implementing PERSIST SETTINGS TO APP-MEMORY
      - run-time disable some options
      - still need developer options though

----------
Saturday 2019-07-13

  CODING

    - resolved the compile issue from 2019-07-12. apparently, it was a circular include of some sort related to MenuScene.h. I had code to return to the main menu on a back press implemented in the SettingsLayer class; I moved this to the grandchild and now it works fine.

    - replaced all instances of CREATE_FUNC

    - partially implemented PERSIST SETTINGS TO APP-MEMORY
      - radio button was a bit tricky

----------
Friday 2019-07-12

  CODING

    * one change I made that I might want to implement on all the scenes is the replacement of CREATE_FUNC, especially on the Scene classes

    - began trying to implement ONE persisted setting, however the GRANDCHILD Layer class has compile errors I can't figure out (re: c++ includes, forward declarations, etc.)

      AppSettingsLayer < SettingsLayer < Layer

      - not sure if this web article will help
        https://discuss.cocos2d-x.org/t/base-class-has-incomplete-type-why/35087
        http://www.cplusplus.com/forum/articles/10627/

      * another option is changing the SettingLayer to just a re-usable class implementation so that it looks something more like a PARENT-CHILD inheritance:

      AppSettingsLayer < Layer
                       < Setting class

----------
Thursday 2019-07-11

  CODING

    - "title" panel
    - radio buttons larger to match checkboxes
    - radio button panel: enabled, event listeners

----------
Wednesday 2019-07-10

  CODING

    - just MAKING A NOTE that TOGGLE and POTENTIOMETER ui components are available(?) through CC
      - https://stackoverflow.com/questions/22010953/making-toggle-menuitem-a-sliding-on-off-button-with-cocos2d-x
      - see cpp_tests\Resources\extensions

    - removed "settings scene B" (used for initial cocos2d-x widget testing)
    - added "application settings scene"
      - initial design outline
    - experimented with ui::RadioButtons

----------
Tuesday 2019-07-09

  CODING

    settings

      - implemented INITIAL VALUES for the checkbox and slider

      - implemented custom code for scrollview container inner-container size and widget placement, when the # of widgets exceed the size of the "default" visible size of the scrollview (COMPLICATED by the how widgets are placed by default ..from the bottom-up)
        - also, changed the SettingsManager to a SettingsLayer for easier object cleanup and scene usage

----------
Monday 2019-07-08

  CODING

    - next: implement application settings; also, prevent scrollview from moving until full

    - rotation

      - I tried rotation on scene/layer, but the touch didn't stay in-sync. probably have to reload rotated RUBE assets(?) if pursuing this

    - slider panel

      - finished the slider and the base settingsmanager. I ended up putting each panel in a vector array - mostly for maintaining referential integrity for callbacks

      ISSUE:
      
        I'm using a spriteframe texture for all the ui control graphics. the slider "progress" graphic, however, has some issue that seems to override the normal graphic at every position of the slider knob. it's just the progress slider for the spriteframe-version only.
        
        WORKAROUND FIX(?) - it seems to work fine when altering the code to just load a STANDALONE SPRITE for the progress slider. it's too complicated of a bug for me when I tried to debug the cocos2d-x code.


----------
Sunday 2019-07-07

  CODING
    - checkbox, divider

    - spriteframe

      * REMEMBER TO MINIFY .PLIST XML
      https://www.webtoolkitonline.com/xml-minifier.html

      * IMPLEMENT EVERY ~SCENE ON DESTRUCTORS
        SpriteFrameCache::getInstance()->removeSpriteFrames();

    - thought about altering RUBELayer::create and constructor to handle passing struct data like SettingsManager, but it's already passing by Ref.. so I left it alone

    - slider

    TODO: remove "UI Widgets" scene and related code once done

----------
Saturday 2019-07-06

  CODING

----------
Friday 2019-07-05

  CODING

    - custom SettingsManager class to centralize settings layout

    ui::Checkbox

----------
Thursday 2019-07-04

  CODING

    ui::Slider
      - seems ok so far. sketched images and scaled percentage for a mock "acceleration scaling factor"; callback is working too.

    ui::ScrollView
      - experimented with the cocos2d-x ui::ScrollView container for my MENU and SETTINGS scenes

      - ScrollView works with Menu, but not exactly how I expected once the number of menu items grows beyond a window height. some ASSUMPTIONS - the ScrollView is as tall / wide as the entire screen AND the menu is set to "align items vertically with padding". this is set work "correctly" on my main menu, but I'm uncertain in long term -- IS THE MENU REALLY EVEN NECESSARY?

      - ScrollView works with DrawNode for drawing simple shapes, it stays in place as a child of the ScrollView

  MISC

    * a note regarding the DEBUG DRAW FILL-PERSIST issue; apparently it's restricted to the certain devices only as the note 4 AND galaxy s3 loaded the RUBE demo without that problem

    * just curious how the cocos2d-x DISPLAY STATS renders text compared to the on screen log implemented from iforce2d code examples

      - glanced at briefly, but for future reference the location is: ../cocos/base/CCDirector.h/.cpp
        TAGS: "GL verts", "GL calls"

      - screen log font size: ScreenLog/ScreenLog.h/.cpp -> screenLogMessage::createLabel()

----------
Wednesday 2019-07-03

  settings UI layout

    - so after some consideration, I'm probably going to stick with the cocos2d-x ui. It is native after all. I still need create some experiments (screens + menu or layouts) with these controls and reconsider my prior plans with RUBE.

    - here are the links re: cocos2d-x ui docs:

      https://docs.cocos2d-x.org/api-ref/cplusplus/v3x/dd/df1/group__ui.html
      https://docs.cocos2d-x.org/cocos2d-x/en/ui_components/

    - as an aside I installed autodesk sketchbook (phone and desktop) for sketching out ui??


    - the RUBE DEMO also shows a ui layout with some dials and sliders

      - a bit sparse in the UI controls dept, but they look cool
        - button, slider, and dial (dial being the most unique)
        - as a bonus, I could load the .json files directly into the RUBE editor

      - overly complex class inheritance heirarchy:
        UIControlsRUBELayer < ButtonRUBELayer < RUBELayer < BasicRUBELayer < cocos2d::Layer (WAS THIS REALLY NECESSARY?)
      
      - I rebuilt this project in landscape as it was intended(?)..everything looked ok except for the pinball game, but that's a separate issue AND also the physics debug draw fill-persist
    
      - also had to fix the physics pre-processor specified in the project's android module ../jni/Application.mk to not use chipmunk so it would build the apk without errors


    - I took another look at COCOS CREATOR to see if using it was a viable option create setting UI controls and layout, then importing it somehow to the cocos2d-x c++ environment -- but the IDE is just so unintuitive, clunky and slow - I can't use it

----------
Tuesday 2019-07-02

  - review notes 2019-05 + 2019-06 ..that actually took awhile

  audio notes

    - motorcycle "hog" orthogonal view; like earlier car idea with road, suspension

    - toy movement also CONTROLLED BY THE GYROSCOPE in addition to the accelerometer; option setting
      - idea from hula girl in the app store - stated it was required
      - possible to use magnetometer in place of the gyroscope? lower end devices only have magnetometer..

    - rubber duck toy moving on a slippery floor shower/bathtub, bubbles, animation frames for 3d

    - sensors test, refine this and put in the option just one extra thing in apps

    - golfer swinging at a golf ball

    - physical hula dashboard doll AND sell??? cross-selling..
    - green "grass" velcro surface

    + expand on gyro test project
      - restrict gyroscope to y-axis movement option
      - swipe left/right to rotate
      - import any 3d sprite .obj
      - pan/zoom
      - reset

----------
Monday 2019-07-01

  MISC
    - new journal for June 2019 created

    - stats:
        - journal start: 2018-10-07
        - total: 125/280 based => 44.6%
        - june 2019: 30/30 days => 100%

  ui controls
    http://en.fairygui.com/
    - it's in chinese so no and the name.., but at least some GUI control mechanisms and look/feel can be copied

  re-watch rube tutorial videos
    - last one

    * just a thought, v1.6 introduces samplers and one of the features is to capture images at different physics states ~an animation tool of sorts. this might be useful for animating some things on my desktop toys as an alternative to simulating entirely in box2d.
      - wind effect on hula skirt, hair, lei, etc.; maybe some other things
      - QUESTION: would it be more efficient to create 10/15/20/30/60 animation sprite frames or do the box2d thing?
      - https://www.reddit.com/r/gamedev/comments/4dabac/how_many_frames_should_sprite_animations_have/