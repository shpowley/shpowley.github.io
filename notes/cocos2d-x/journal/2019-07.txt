----------
Thursday 2019-07-11

  TODO

    - "title" panel
    - radio buttons larger to match checkboxes
    - radio button panel: enabled, event listeners

----------
Wednesday 2019-07-10

  CODING

    - just MAKING A NOTE that TOGGLE and POTENTIOMETER ui components are available(?) through CC
      - https://stackoverflow.com/questions/22010953/making-toggle-menuitem-a-sliding-on-off-button-with-cocos2d-x
      - see cpp_tests\Resources\extensions

    - removed "settings scene B" (used for initial cocos2d-x widget testing)
    - added "application settings scene"
      - initial design outline
    - experimented with ui::RadioButtons

----------
Tuesday 2019-07-09

  CODING

    settings

      - implemented INITIAL VALUES for the checkbox and slider

      - implemented custom code for scrollview container inner-container size and widget placement, when the # of widgets exceed the size of the "default" visible size of the scrollview (COMPLICATED by the how widgets are placed by default ..from the bottom-up)
        - also, changed the SettingsManager to a SettingsLayer for easier object cleanup and scene usage

----------
Monday 2019-07-08

  CODING

    - next: implement application settings; also, prevent scrollview from moving until full

    - rotation

      - I tried rotation on scene/layer, but the touch didn't stay in-sync. probably have to reload rotated RUBE assets(?) if pursuing this

    - slider panel

      - finished the slider and the base settingsmanager. I ended up putting each panel in a vector array - mostly for maintaining referential integrity for callbacks

      ISSUE:
      
        I'm using a spriteframe texture for all the ui control graphics. the slider "progress" graphic, however, has some issue that seems to override the normal graphic at every position of the slider knob. it's just the progress slider for the spriteframe-version only.
        
        WORKAROUND FIX(?) - it seems to work fine when altering the code to just load a STANDALONE SPRITE for the progress slider. it's too complicated of a bug for me when I tried to debug the cocos2d-x code.


----------
Sunday 2019-07-07

  CODING
    - checkbox, divider

    - spriteframe

      * REMEMBER TO MINIFY .PLIST XML
      https://www.webtoolkitonline.com/xml-minifier.html

      * IMPLEMENT EVERY ~SCENE ON DESTRUCTORS
        SpriteFrameCache::getInstance()->removeSpriteFrames();

    - thought about altering RUBELayer::create and constructor to handle passing struct data like SettingsManager, but it's already passing by Ref.. so I left it alone

    - slider

    TODO: remove "UI Widgets" scene and related code once done

----------
Saturday 2019-07-06

  CODING

----------
Friday 2019-07-05

  CODING

    - custom SettingsManager class to centralize settings layout

    ui::Checkbox

----------
Thursday 2019-07-04

  CODING

    ui::Slider
      - seems ok so far. sketched images and scaled percentage for a mock "acceleration scaling factor"; callback is working too.

    ui::ScrollView
      - experimented with the cocos2d-x ui::ScrollView container for my MENU and SETTINGS scenes

      - ScrollView works with Menu, but not exactly how I expected once the number of menu items grows beyond a window height. some ASSUMPTIONS - the ScrollView is as tall / wide as the entire screen AND the menu is set to "align items vertically with padding". this is set work "correctly" on my main menu, but I'm uncertain in long term -- IS THE MENU REALLY EVEN NECESSARY?

      - ScrollView works with DrawNode for drawing simple shapes, it stays in place as a child of the ScrollView

  MISC

    * a note regarding the DEBUG DRAW FILL-PERSIST issue; apparently it's restricted to the certain devices only as the note 4 AND galaxy s3 loaded the RUBE demo without that problem

    * just curious how the cocos2d-x DISPLAY STATS renders text compared to the on screen log implemented from iforce2d code examples

      - glanced at briefly, but for future reference the location is: ../cocos/base/CCDirector.h/.cpp
        TAGS: "GL verts", "GL calls"

      - screen log font size: ScreenLog/ScreenLog.h/.cpp -> screenLogMessage::createLabel()

----------
Wednesday 2019-07-03

  settings UI layout

    - so after some consideration, I'm probably going to stick with the cocos2d-x ui. It is native after all. I still need create some experiments (screens + menu or layouts) with these controls and reconsider my prior plans with RUBE.

    - here are the links re: cocos2d-x ui docs:

      https://docs.cocos2d-x.org/api-ref/cplusplus/v3x/dd/df1/group__ui.html
      https://docs.cocos2d-x.org/cocos2d-x/en/ui_components/

    - as an aside I installed autodesk sketchbook (phone and desktop) for sketching out ui??


    - the RUBE DEMO also shows a ui layout with some dials and sliders

      - a bit sparse in the UI controls dept, but they look cool
        - button, slider, and dial (dial being the most unique)
        - as a bonus, I could load the .json files directly into the RUBE editor

      - overly complex class inheritance heirarchy:
        UIControlsRUBELayer < ButtonRUBELayer < RUBELayer < BasicRUBELayer < cocos2d::Layer (WAS THIS REALLY NECESSARY?)
      
      - I rebuilt this project in landscape as it was intended(?)..everything looked ok except for the pinball game, but that's a separate issue AND also the physics debug draw fill-persist
    
      - also had to fix the physics pre-processor specified in the project's android module ../jni/Application.mk to not use chipmunk so it would build the apk without errors


    - I took another look at COCOS CREATOR to see if using it was a viable option create setting UI controls and layout, then importing it somehow to the cocos2d-x c++ environment -- but the IDE is just so unintuitive, clunky and slow - I can't use it

----------
Tuesday 2019-07-02

  - review notes 2019-05 + 2019-06 ..that actually took awhile

  audio notes

    - motorcycle "hog" orthogonal view; like earlier car idea with road, suspension

    - toy movement also CONTROLLED BY THE GYROSCOPE in addition to the accelerometer; option setting
      - idea from hula girl in the app store - stated it was required
      - possible to use magnetometer in place of the gyroscope? lower end devices only have magnetometer..

    - rubber duck toy moving on a slippery floor shower/bathtub, bubbles, animation frames for 3d

    - sensors test, refine this and put in the option just one extra thing in apps

    - golfer swinging at a golf ball

    - physical hula dashboard doll AND sell??? cross-selling..
    - green "grass" velcro surface

    + expand on gyro test project
      - restrict gyroscope to y-axis movement option
      - swipe left/right to rotate
      - import any 3d sprite .obj
      - pan/zoom
      - reset

----------
Monday 2019-07-01

  MISC
    - new journal for June 2019 created

    - stats:
        - journal start: 2018-10-07
        - total: 125/280 based => 44.6%
        - june 2019: 30/30 days => 100%

  ui controls
    http://en.fairygui.com/
    - it's in chinese so no and the name.., but at least some GUI control mechanisms and look/feel can be copied

  re-watch rube tutorial videos
    - last one

    * just a thought, v1.6 introduces samplers and one of the features is to capture images at different physics states ~an animation tool of sorts. this might be useful for animating some things on my desktop toys as an alternative to simulating entirely in box2d.
      - wind effect on hula skirt, hair, lei, etc.; maybe some other things
      - QUESTION: would it be more efficient to create 10/15/20/30/60 animation sprite frames or do the box2d thing?
      - https://www.reddit.com/r/gamedev/comments/4dabac/how_many_frames_should_sprite_animations_have/