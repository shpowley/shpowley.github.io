  GOALS
    - scene settings
    - overlay settings
    - touch overlay button (pan + zoom)
    - simplified movement setting(s)

----------
Monday 2019-08-26

  updated codebase to no longer pass application settings as a parameter to the scenes as it's already a global

  ~~~~~~~~~~~~
  started working on scene/layer persist, but I forgot about the dashboard concept with multiple toys
    * CHART BELOW NEEDS MODIFICATION FOR SETTINGS FOR (1) APPLICATION, (2) SCENE / DASHBOARD, AND (3) TOY
    - I think it would be better to implement many settings specific to a toy now as opposed to later
    
    - another consideration in the dashboard, I think, is that toys should not be singular (using c++ "singletons" as a comparison) -- but rather each toy should be a base toy "template" that can be customized

      -- this is just dawning on me, but with the dashboard concept, you should start with an empty scene/dashboard that you can customize. changing the dashboard look + settings, placing toys + customizing each toy (VERSION 2.. but I need to alter my mindset going forward to ease making this happen)
  ~~~~~~~~~~~~

  ** PLAYING WITH "compression-spring-wacky.rube" SETTINGS

    - this looks promising for the "bobble-style" physics assembly as a replacement for the simple weld-only joint

      - the BASE is either FIXED or DYNAMIC (with a RELATIVELY HIGH DENSITY)

      - the entire assembly mimics an actual spring with a mass at the top and multiple spring weld components
        - the top mass has a relatively low density compared to each spring component
        - top mass (density = 0.1)
        - spring component mass (density = 1)
      
      TODO - scene test vs single weld
      TODO - scene test altering # of spring weld components


  ** COMPARING POTENTIAL SETTINGS FOR THE HULA SCENE VS THE APPLICATION SETTINGS

  SETTING NAME                  HULA SCENE | APPLICATION | COMMENTS
  ------------                  ----------   -----------   -----------------------------------------
  keep_screen_on                                  x
  dark_mode                                       x        not in use atm, HIDE FOR NOW
  -
  use_gyroscope                     x             x
  gyro_threshold                    x             x
  gyro_scaling                      x             x
  -
  use_accelerometer                 x             x
  accelerometer_type                x             x
  combine xz axes                   x             x
  induce_accelerometer_torque       x             x
  induce_accelerometer_force        x             x
  accelerometer_orientation x                     x
  accelerometer_orientation y                     x
  accelerometer_orientation z                     x
  accelerometer_threshold           x             x
  accelerometer_scaling             x             x
  -
  enable auto-wobble                x             x
  wobble_threshold_velocity         x             x
  wobble_threshold_time             x             x
  wobble_threshold_sensor           x             x
  wobble_force                      x             x
  -
  developer_mode                                  x        TODO persist for convenience and related items too
  physics_debug_draw                              x
  show_images                                     x        not in use yet
  display_stats                                   x
  on_screen_logging                               x
  -
  background type                   x
  user background                   x
  app background                    x
  gyro parallax                     x
  weld joint frequency              x
  weld joint damping ratio          x


  current code:
    GameManager::restoreApplicationSettings()
    GameManager::saveApplicationSettings()
    GameManager::saveSceneSettings() NOT YET USED
    GameManager::STRUCT_SETTINGS

----------
Sunday 2019-08-25

  CODE WALKTHROUGH

    - trying to determine best method to implement SCENE-SPECIFIC SETTINGS

      GOAL: use application-level settings as a baseline if persist scene settings data doesn't exist

      GameManager.h contains STRUCT_SETTINGS variables for the application AND scenes, but I don't think it's a good idea to do this with the scenes
        
        1) there's only a SUBSET OF THE VARIABLES that really overlap
        2) each scene will most likely have settings UNIQUE to that scene

----------
Saturday 2019-08-24

  * the main acceleration logic assumes a bobble-style physics assembly in the linear acceleration portion of code, especially when dealing with angular velocity

  MERGE LINEAR/STANDARD ACCELERATION LOGIC
    - "special sauce" doesn't work well with the standard accelerometer

  ADDITIONAL INFO FOR ON-SCREEN LOGS
    - standard accelerometer: show linear acceleration
    - show angular velocity for all "bobble-style" physics assemblies

----------
Friday 2019-08-23

  MERGE LINEAR/STANDARD ACCELERATION LOGIC
    - merged, but standard acceleration has undesireable wobble; combining both adds complexity
      - not sure if desired behavior is possible or really makes sense

    TODO
      * standard: show linear log
      * both: show angular velocity

  TEST IF FORCE INPUTS ARE CUMULATIVE ON WOBBLE FORCES
    - test this out in a box2d / visual studio scene for force and torque (iforce-b2djsonCumulative.h added)

    * after setting this test up, I discovered that there are no GETTER methods for retrieving FORCE / TORQUE on a body using the Box2D api, but looking at the source code, I discovered that both FORCE / TORQUE is reset for each step, AND is cumulative

  REMINDER: DESIGN EACH RUBE SCENE TO A 4 "METER" BOX2D/RUBE SCREEN HEIGHT (see journal entry 2019-06-07.txt)

  - print out RUBEScene.h / .cpp to pdf

----------
Thursday 2019-08-22

  - read through some of this month's journal and version goals

  BACKUP COMPUTER

  RESET PROJECTS
    rube_loader_custom, gyrotest, celestial
    NOTE: rube_loader_custom - og project and version in github has remnants of LIVE WALLPAPER CODE

----------
Wednesday 2019-08-21

  I haven't worked on this for a couple weeks, mostly because of Jack's visit

  - some things changed during this period, NOT EXACTLY SURE WHAT HAPPENED TO CAUSE SO MUCH BREAKAGE..

  - upgraded to ANDROID 3.5, switched to CMAKE instead of ndk, AND upgraded to cocos2d-x.3.17.2
    - the ndk option doesn't seem to work anymore so all existing projects had to be reset into a new project so far
    * also checked into git (copied over relevenat git files and modified .git appropriately)

  - tried this again with rube_demo, but I've noticed that creating A NEW WORKING PROJECT DOESN'T JUST WORK anymore using "cocos new"..
    * I have to reset/re-sync using various options and switch from "cmake" to "ndk-build" back to "cmake" again on a basic project; not really sure what's going on though


  SUMMARY:

    - create a new project and fiddle with gradle.properties > PROP_BUILD_TYPE=cmake >> ndk-build (kicks off gradle update) >> cmake
      - compile / run to verify basic project works

    - if re-creating a project, copy over relevant files and update CMakeLists.txt
      - github project tracking - copy over relevant git files and modify .git

----------
Friday 2019-08-02

  - re-organized .h/.cpp files + folders

  - replaced menu images with a hawaiian flower
    - temporary as this entire menu scene will be replaced, but practiced gimp masking technique

----------
Thursday 2019-08-01

  MISC
    - new journal for August 2019 created

    - stats:
        - total: 154/311 based => 49.5%
        - july 2019: 29/31 days => 93.5%


  CREATING ICONS FOR SCENE OVERLAY

    - also created +/- icons for later - granular slider step buttons


  LOOKING @ "UNNIEDOLL" APP FOR SOME ICON IDEAS
    - tapping the screen produces a quick "star" animation visual cue


  quick brainstorm re: hula dancer options
    - base design (or none), skirt, pose, skin tone, hair color, top, lei, flower, sunglasses
      - bases: bottle cap, coin, coin stack, surfboard, hand (open palm)
    - wind effects, extra physics
    - background color/image, visual effects (flowers falling, clouds)
    - other objects (surfboard(s), beach life)


  * ANOTHER THOUGHT, each scene as currently implemented can customize each "toy" look and physics *ONLY*
    
    - "BASE" toy + EDIT / SAVE customized toys; which can be used in TOY-MODE
      - so TOY-MODE wouldn't allow backgrounds, etc. per se; instead an option to create a new dashboard using said toy

    - DASHBOARD-MODE would allow customization of 1+ toys, backgrounds, etc.


  * TOUCH

    - right now touch is enabled on all toys, but this should be an option