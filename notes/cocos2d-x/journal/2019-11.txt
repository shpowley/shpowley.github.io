HUD mass / frequency sliders
  - needs slider AND +/- update logic
  - needs persist
  - needs combined slider
  - needs slider animation

spring button click, disable/enable ALL other buttons for animation sequence

persist data flag for app/scene settings similar to HUD persist

slider images
  - can't be used from texture, so...
  - remove "slider-done.png" and "slider-disabled.png" from sprite texture
  - also remove GameManager::IMAGE_SLIDER_PROGRESS, GameManager::IMAGE_SLIDER_PROGRESS_DISABLED

*** multi-toy dashboard update function BRAINSTORMING.. ***
  - each toy need to have it's own distinct motion response
  - current b2Body storage mechanism has ALL b2Body objects, but there should be a way to partition/identify each body and which toy it belongs to with an additional field in the storage container AND/OR have a linked list of b2Body objects in specific toys...
  - with the intention of being able to more easily apply toy-specific physics (ie. gyro y/n, linear or standard acceleration, auto-wobble, motion-filter, etc.)

language translation lookup and replace
  - english or alternate language
  - tools: https://www.johnwordsworth.com/projects/plist-pad/
  - c++ set + struct: search "_image_info_library" in code
  - use "static constexpr const char*" for actual text instead of hard-coding OR struct containing char* + key

developer options
  - separate options for top ad and bottom ad - ON/OFF

new scenes code seperation
  - method for separating scene-specific references from code as include files, etc.
  - the intention of being able to add/remove new scenes easily

HUD spring button
  - consolidate functionality (2 modes):
    1 - DEVELOPER MODE spring frequency AND mass slider (developer mode - ON/OFF)
    2 - USER MODE simplified slider (steps 0 - 10, combined frequency / mass)

----------
Monday 2019-11-18

  STOPWATCH: 7:05


  WOBBLE PROJECT

    BUG FIX: application settings "developer options" crashing when OFF and pressing header

    - adding sliders; debating whether to use ui::text or sliders..
      - not exactly sure the difference and why I chose ui::text for settings
      * I think for the HUD panel containing sliders, etc., it should slide up/down for consistency with sliding left/right button sets

    GOAL - make the HUD ui simple/quick without being too distracting from app itself

    - HUD mass / frequency sliders
      - init complete
      - some changes reflected back to SettingsLayer.h/.cpp

----------
Saturday 2019-11-16

  STOPWATCH: 5:28


  WOBBLE PROJECT

    language translations
      - assuming this is marketable, planning a language translation scheme
      - see GameManager.h search commented "STRUCT_TRANSLATION_CODEX" section

    button "spring" motion response ("quick settings" secondary buttons set)
      - logic for the highlight effect on this button and also a basic "container panel" for the slider(s)

----------
Friday 2019-11-15

  STOPWATCH: 3:15


  WOBBLE PROJECT

    toast labels
      - implemented for specific secondary buttons
      - toast label unused for certain buttons that perform a visible action or create additional UI
      - quick-fade logic for ON/OFF secondary hud buttons; it works, but logic seems convoluted(?) -- ok for now

    HUD ads show/hide/fade out logic cleanup
      - hide ads in pan/zoom mode

    HUD spring button
      - eliminate "mass" hud button altogether

    clean up graphics
      - remove question mark, mass icon

----------
Thursday 2019-11-14

  STOPWATCH: 7:00


  WOBBLE PROJECT

    - hud buttons visibility bug fix

    hud labels class (HUDLabel .h/.cpp)
      - this will be made into it's own class
      - designed for HUD text labels + background panel

      - used by the HUD-RUBE layer
        - in the future, dashboard-mode and toy-edit-mode will both most likely be composed of the HUD/RUBE

      - 3 types of labels: toast, right tooltips, left tooltips
      - pre-allocate labels, show/hide, fade out, etc.

      X change of plans after partial implementation
        - rename this to ToastLabel .h/.cpp
        - support only an android "toast" like message
        - usable by any scene
        - remove the question mark help altogether
        - for the HUD, the "toast" will appear with just about any button push

        * COMPLETED FOR PRIMARY HUD BUTTONS

----------
Wednesday 2019-11-13

  STOPWATCH: 8:39


  WOBBLE PROJECT

    ads
      - change top/bottom ad strip visibility to appear / disappear to be in-sync with secondary button set (slightly less annoying)
        
      - add test ad for application/scene settings


    "sensor electronics" primary button
      - icon graphic created

      - "sensor electronics" secondary button strip
        - light sensor
        - gyroscope
        - accelerometer

      - multi-gear button changed to only trigger one secondary button strip
        - eye, auto-wobble, mass, spring, rotate


    context-relevant labels
      - begin creating "tooltip" labels for use with tooltip help and actions

----------
Tuesday 2019-11-12

  STOPWATCH: 1:47


  WOBBLE PROJECT

    "DASHBOARD" CONCEPT WITH MULTIPLE BOBBLE TOYS
      - THOUGHTS ABOUT SCALING RUBE/BOX2D ASSEMBLIES

      - I'm not sure if I got this idea driving around or from the "unnie doll" app (or both)
      - right now my app was designed for only one RUBE .json dashboard toy, similar to the RUBE demo

      - MULTIPLE dashboard toys, like a desk/dashboard in real life would require importing more than one RUBE file and adding customizations defined by the user within the app

      - I think I would like something similar to the "unnie doll" approach, with some modifications
        - customized dashboard toys from a "base RUBE template" dashboard toy, which can then be placed on a scene or desktop/dashboard

        - multiple customized dashboard toys can be placed on the dashboard and moved

        - "UNNIE DOLL" TAKES THE APPROACH OF NOT ALLOWING ANY CUSTOMIZED "DOLLS" TO BE RESIZED, they can only be moved, and the z-order can be changed using a "last touched" approach for the top layer z-order

        - I could go with the "unnie doll" approach, or somehow resize the dashboard toys to create a simulated 3D "vanishing point" perspective, which would be much more cool, but also more difficult to implement
          - upon reflection, I think these options would be good: vanishing point perspective (toy resize) vs. flat "sticker" panel

        *** EXPERIMENTING IN THE RUBE EDITOR AND RESIZING THE MULTI-JOING HULA DOLL
          
          - RE-SIZING THE MULTI-JOING HULA DOLL IN THE RUBE EDITOR APPEARS TO KEEP THE PHYSICAL MOTION RESPONSE NEARLY IDENTICAL
            - the prismatic joint's upper lower/limit didn't scale properly, but a manual calculation fixed it
          
          - re-sizing in my app would have to be done programmatically -- I THINK IT'S TECHNICALLY FEASIBLE
          - I'M NOT SURE HOW THIS WOULD BE BEST IMPLEMENTED IN THE UI THOUGH

          NOTES:
          - all dashboard toys would ideally exist in the same b2World (and c++ RUBELayer) to take advantange of the update algorithm / physical wobble effects
          - I had considered a multi-RUBE layer stack, but I think one RUBELayer would be more ideal
          - the existing c++ RUBELayer would need modifications to be able to handle multiple custom RUBE assemblies (add/remove/clear/move/resize/persist)

            ** FROM THE RUBE EDITOR EXPERIMENT: **
            - resizing affects size and relative positions for images, body, fixture, joints, etc.; anchor positions also fall within this category -- anything having to do with sizing
              - relative image heights were used for scaling %

            - fixtures maintain density
            - joints maintain frequency, damping, etc.

          - also, multiple dashboard toy assemblies shouldn't be able to collide at different z-axis "distance zones", collision should be possible for those at nearly the same x-axis (I'm not sure if this makes sense, but basically objects in front shouldn't interfere physically with objects in the back)

----------
Monday 2019-11-11

  STOPWATCH: 2:39


  WOBBLE PROJECT

    - persist data keys added for additional new settings
      + new option for intermittent auto-wobble
      - save / restore functions updated

    - application settings
      - moved "Sensor Test" button to the developer options tab
      - modified "Restore Default" to "Application Reset"
        - this now resets the application defaults and purges all persisted data
      * NOKIA 6.1 WRITEABLE PATH: /data/data/com.rube.master/files
        - found using android studio device explorer

----------
Saturday 2019-11-09

  STOPWATCH: 2:42


  WOBBLE PROJECT

    - fixed issue with back button accidentally being disabled

    PAN/ZOOM implementation
      - persist/restore
      - reset location

----------
Friday 2019-11-08

  STOPWATCH: 4:43


  WOBBLE PROJECT

    - PERSIST DATA PLAN: new struct items created, but needs implementation


    PERSIST DATA PLAN

      (AUTO SAVE/RESTORE + RESTORE DEFAULTS)
      - pan scene/layer position    =====> scene_settings.scene_position_x
                                    =====> scene_settings.scene_position_y
                                    =====> scene_settings.use_scene_persist_position

      - zoom scene/layer scale      =====> scene_settings.scene_scale
                                    =====> scene_settings.use_scene_persist_scale

      (SCENE DEFAULTS, SCENE SETTINGS, SCENE VISIBILITY)
      - gyro motion filter          =====> scene_settings.use_motion_filter_gyroscope
      - gyro y-axis                 =====> scene_settings.gyroscope_y_axis_x_motion_control
                                    =====> scene_settings.gyroscope_y_axis_background_parallax
      - gyro z-axis (existing)      =====> scene_settings.gyroscope_z_axis_x_motion_control

      - use light sensor enable     =====> scene_settings.use_light_sensor
        - light sensor threshold    =====> scene_settings.light_sensor_threshold

      (OTHER)
      - ads
        (APPLICATION SETTINGS > DEVELOPER OPTIONS)
        - paid                      =====> application_settings.app_paid_for

        (SCENE SETTINGS > DEVELOPER VISIBILITY)
        - scene unlocked            =====> scene_settings.scene_unlocked


    HUD
      - hand PAN/ZOOM
        - this appears to be working more-or-less how I envisioned it

        * NOTE: WHILE THIS DOES WORK, IT SHOULD BE NOTED THAT THIS AFFECTS THE RUBE LAYER AS A WHOLE, NOT THE INDIVIDUAL BOX2D ASSEMBLY

        - MOSTLY COPIED FROM THE RUBE DEMO with adjustments
          - applied min/max limits to the scaling and panning
          - allows CONTINOUS TOUCH to pan (based on initial touch-0) and scale when using 2-finger pinch-to-zoom, and back to panning, etc. -- a bit more of a natural feel than the RUBE demo

----------
Thursday 2019-11-07

  STOPWATCH: 6:34


  WOBBLE PROJECT

    HUD
      - PAN/ZOOM implementation: min/max WIP
        - zoom min/max works..
        - pan min/max sorta ok, but re-scaling it breaks it though I think

      - hand button UI logic + related bug fixes

      - PAN/ZOOM implementation
        - this was removed when re-purposed for my project; I didn't like the combined PAN/PINCH-TO-ZOOM + SINGLE TOUCH BOX2D INTERACTION

        * for my project, I want these modes distinct
          - pressing the HUD "hand" button
            - PAN/PINCH-TO-ZOOM (enabled)
              - single touch PAN
              - 2-finger PINCH-TO-ZOOM

            - SINGLE TOUCH BOX2D INTERACTION (disabled)
            - PAN/ZOOM mode visual indicator

          - otherwise, only SINGLE TOUCH BOX2D INTERACTION (enabled)

        - re-implement code from "RUBE Demo project"
          BasicRUBELayer.cpp > void BasicRUBELayer::onTouchesMoved()

----------
Wednesday 2019-11-06

  STOPWATCH: 5:42


  watched google play ad video
    - https://developersonair.withgoogle.com/
    - ideas: in-app sharing, intro special offer


  WOBBLE PROJECT

    HUD
      - paintbrush button and logic related secondary paintbrush buttons
        - secondary paintbrush buttons graphics created (foreground, background, scene)
        - THIS IS A DUMMY FEATURE FOR NOW

      - primary highlight moves in response to "active" button state

----------
Tuesday 2019-11-05

  STOPWATCH: 4:38


  WOBBLE PROJECT

    HUD
      - black background button panels + updated button colors

      - short/long-press detection implementation

        + high resolution timer:
          https://stackoverflow.com/a/41077420
          http://www.cplusplus.com/reference/chrono/high_resolution_clock/now/
          http://www.cplusplus.com/reference/chrono/duration/duration/

        + touch listener

        - 1st test/attempt worked, but didn't quite work as a "long-press"..it was more of a long-press + release; HIGH-RESOLUTION TIMER INFO MIGHT BE USEFUL IN THE FUTURE THOUGH

        - 2nd long-press attempt works as expected; uses a standard cocos2d-x scheduleOnce mechanism
        - implemented for gear, accelerometer, gyroscope, auto-wobble HUD buttons, opening the corresponding scene settings accordion section


      - HUD button gear modified to use touch listener instead of click event handler -- works ok
        - almost all HUD buttons use touch listener now
        - reason: primarily for short/long-press detection

      - persist scene data modified to test / persist @ deconstructor or HUD fadeout
      - implemented active HUD buttons for accelerometer and gyroscope on/off

      NOTE: HUDLayer uses .getInstance() method similar to GameManager etc. to get static instance of the HUDLayer; this seems to work ok so far and makes it much easier to access the HUD layer from the RUBE layer

      ISSUE #1 FIXED: HUD buttons init is happening too early, prior to loading the scene settings, which happens during the RUBELayer constructor. at first this was okay, but now the HUD button states are dependent on the scene settings being valid

----------
Monday 2019-11-04

  STOPWATCH: 7:08


  WOBBLE PROJECT

    HUD
      eye and auto-wobble buttons now display current setting, works on-press and persist
        - next: light-sensor, gyro, accelerometer

      ISSUE FIXED: ui::Widget objects apparently don't propagate touches (I tried several approaches); my fade-in/fade-out code was moved from the RUBELayer to the HUDLayer to make this work
      - for example, repeatedly pressing the "eye" button would never reset the HUD fadeout timer properly

      ISSUE FIXED: enable/disable primary buttons on fadein/fadeout to prevent weird button state ..a very narrow time window

      - use ->setTouchEnabled() instead of ->setEnabled() for ui::Button; functionaly it seems the same for my purposes (I think), but prevents the button icons' color changing to grey when disabled

----------
Sunday 2019-11-03

  STOPWATCH: 1:02


  WOBBLE PROJECT

    HUD graphics

----------
Friday 2019-11-01

  STOPWATCH: 2:27


  OCTOBER STATS:

    days total:   208/403 based   => 51.6%
    days:         22/31 days      => 71%
    
    hours total:  157:51
    hours:        115:01


  WOBBLE PROJECT

    HUD graphics
      - getting a good mix of colors to work is difficult
      - planning to incorporate a squircle onto most button icons I think