*** re-watch RUBE tutorial videos and take notes: @ v1.4 updates - https://youtu.be/XM_yYvk3AKk


HELP PANEL

  - online version: http://www.iforce2d.net/rubehelp/
  * it might be worthwhile to read through some sections


RUBE DOCUMENTS

  - RUBE files can be opened by using drag/drop in the open editor

  - certain panels reference the ACTIVE DOCUMENT
    - context help (F9), items (F6), script (F8), properties (F7)

  - multiple views of the same document (open same file OR CLONE view)
    - actions affect cloned views
    - each view could be in a different edit mode


PLAYER VIEW

  - simulation speed requires button toggle
  - can also be cloned


CURSOR

  - "C" + mouse-click to manually move it
  - "C" + "S" to move it to selection center
  - "S" + "C" to move selected items center to cursor
  - "C" + "C" to specify point by typing coordinates
  - "C" + "X" OR "Y" to constrain cursor placement in horizontal OR vertical only


ITEMS PANEL

  - allows selecting different types of entities (bodies, fixtures, images, etc.)
  - shows object heirarchy for bodies and joints (pretty handy)
  - items can be renamed

  - filter search by names
    - top-down for top-level heirarchy
    - bottom-up for lower heirarchy

  - all/none for easier venn-diagram select approach :)


SCRIPT PANEL

  - immediate window to run scripts
  - angelscript (see help)


SCRIPT LOGS

  - backup log directory + backup files (.rs extension)
  - linux "tail" command will show actions performed in the RUBE editor as script commands -- these are actually being appended to the .rs backup file
  - backup files could be used to restore a .rube file if anything happens to it
    - by copy/paste contents into the SCRIPT PANEL (or drag/drop)


ITEM MANIPULATION (TRANSLATION, ROTATION, SCALING)
  +SHIFT : fine control/movement
  +CTRL : step

  - for JOINTS, press T twice to switch anchors
    - distance joints, 3rd T mode option

  - item TRANSLATION can jump between viewport views
  - for ROTATION/SCALING, 2 modes: rotate around 1) cursor OR 2) selection center

  - mirror any item type except images
    - for images, use image properties "flip" and "rotate"

    - use negative scaling for all other object types (S, X, CTRL..)
      NOTE: mirroring "polygon decomposition" can create many more sub-polygons than the original (fix this with Fixture > Reverse vertex winding)

    - mirroring composite objects - this will work fine, except for joints
      - positions will be fine, but the limit settings might have to be adjusted


VERTEX WINDING

  - always counter-clockwise, convex for the most efficient "polygon decomposition"


VERTEX MODE

  ADD COMPLEX VERTICES PATHS
    - press E for "EDGE MODE" to QUICKLY ADD VERTICES TO AND EXISTING EDGE

    - select vertex and press E + E (2nd time) to QUICKLY ADD VERTICES ANYWHERE
      - press E (3rd time) to QUICKLY ADD VERTICES ON THE OTHER EDGE OF THE SELECTED VERTEX
      *** with this mode it's easy to QUICKLY CREATE A PHYSICS SHAPE OUTLINE OF ANY IMAGE ***

    - able to cycle add vertices mode by pressing E repeatedly


IMAGES

  - background or attach to a body
  - able to drag/drop images (automatically become 1-unit in the physics world)
  - position is relative to the body it's attached to or world coordinates if not attached to a body
  - can be copy/pasted onto 1 or more new bodies


ACTION MENU

  - accessible using SPACE BAR, right-click (as an option), or menu

  - add CUSTOM SCRIPTS manually in folder - <install dir>\rube\config\actionMenu
    - default | myscripts-
    - both contain scripts
    - leave "default" alone

    - myscripts- "hyphen" means custom scripts are ignored; remove hyphen to allow custom scripts
      - layout.json: how menu is constructed, name, script file, etc.
      - .rs files: actual script
      - auto-load new scripts without having to restart


CUSTOM PROPERTIES (tutorial 17/18 - https://youtu.be/nCp-EK_IICA)

  - can be added to any object type including world
  - attributes include "class" (ie. the object type), data "type", "name" (used by script), and "display name"
  - custom properties / set values also shown on hover tooltip

  RELATED HELP
    - section "Custom properties"
    - also check out "Using exported data" > "Supported loaders" >> "Loading custom properties"
    - also check out "Using exported data" > "JSON file structure"

  - custom properties can also be "unset" so that they don't exist
  - exported json wraps all custom properties in "customProperties" sub-group
    - how-to load example can be found @ <install>\rube\sampleLoaders\box2d-testbed-(C++)\src\Box2D\Testbed\Tests\loadrube_customProperties.h (as shown in the video)

  NOTE: once a custom property is added to a certain object type, it exists for all new instances of that object type
    - so in a sense, new custom properties should be defined as broad as possible to be applicable to object instances of that object type

  - right-click on the properties window to add new custom properties
  - also accessible from "scene > scene settings > custom properties" via a summary table of all custom properties; add, delete, modify, ..

  - COPY custom properties for a scene using "scene > scene settings > copy to clipboard" and then running the script in your new scene 


SAMPLERS (tutorial 18/18 - https://youtu.be/O68lFQWe7-A)

  * 2 use-cases: ANIMATION-CAPTURE and FIXTURE AUTO-TRACE

  RELATED HELP
    - section "Editing items" > "Editing samplers - overview"


  - a "rectangular area" of the screen
    - top level object (like bodies, fixture, etc.) that's kind of a "camera" of sorts
    - the "camera" samples graphic images in a defined area and is able to output to another image file at a specified resolution (sample width/height)
    - can be "attached" to a body

    - orientation can be rotated
    - "output width/height" is better defined as an "aspect ratio" defined with a # of samples, whereas the actual world height is defined separately (width is auto-calculated based on this)

  - composite image samples that when combined with the "simulation" allow you to create animation frames
    - a sample window moved/sized to certain positions create "camera motion effects"
    - example shown on trainWheels.rube (I can't find this anywhere though)

    - RUBE isn't really a graphics or animation tool per se, but it's physics capabilities adds an interesting twist --- I HAVE TO THINK ABOUT IT'S BEST USE-CASE..

  - simulation > step all bodies
    + specify # steps


  QUICK AUTO-TRACE (1-STEP)

    - a "rough" trace of image using polygon fixtures
    - action menu > sampler > create body+fixture from image; use defaults, except for "keep sampler?" (NO)
    - clean up in vertex mode


  sampler EDGES ===> ADVANCED AUTO-TRACE

    - limited by the sample "resolution" (~# samples) and the source image
    - default edges defined by the image opacity delta
      - "Use color edges" is the other option that defines edges by color + opacity

    - sampler PATHS / CONTROL POINTS
      - press "E" to edit control points
      - add control points to have RUBE create a polygon path - uses auto-pathfinding with the control points as user-defined "path-finding assist guides"
      - as each control point is added the polygon defined by the path finding auto-updated
      - control points added in-between 2 existing points will define it as such

      * be sure to add control points in a counter-clockwise direction for efficient "polygon decomposition"

      - keep image/sampler control points in-sync by attaching both to the same body (see https://youtu.be/O68lFQWe7-A?t=2649)
      - path further refined by adjusting either "Max points" and "Min angle" (not both); "Max points" being the most useful

      - LAST STEP is to generate a fixture from the sampler path
        - with the body AND relevant sampler selected, use action menu > sampler > create a fixture from sampler
        - should produce a much more accurate/efficient auto-trace when compared to the QUICK AUTO-TRACE
  

MISC
  
  - CTRL + right mouse button will ZOOM to created rectangle
  - SEND FEEDBACK option built in to RUBE
  - each mode can have different items selected
  - fixture shape type greatly impacts resulting appearance (tutorial 7/18)
  - delete using DELETE or BACKSPACE
  - "save a copy" creates a snapshot


DUPLICATION (shift+D)

  - actually causes 2 operations (duplication & translate)
  - will also duplicate joints attached to the body - NOTE: be careful only duplicating 1 body with a joint attached, as the other side of the joint will still be attached to another body
  - for duplicated fixtures, the fixtures remain attached to the same body as the source

  - COPY / PASTE feature will still work as usual, but more useful for pasting into other documents
    - DUPLICATE combines COPY+PASTE+TRANSLATE
    - copies plaintext json into the clipboard - this can be edited in a text editor and copied again
    - for fixtures can be pasted onto new bodies (1+ body at the same time)


BOX2D BODY TYPES

  DYNAMIC - affected by gravity, linear/angular velocity, collides w/ all bodies (unless specified otherwise)
  STATIC - unaffected by gravity, position/angle can be set, but doesn't move
  KINEMATIC - unaffected by gravity, linear/angular velocity, does not collide with static bodies


JOINTS

  - 1st body selected is "body A"
  - JOINTS CAN ONLY BE DUPLICATED, as body A / body B references are maintained

  JOINTS AVAILABLE IN RUBE EDITOR

    *REVOLUTE
      - see iforce2d tutorial log "Tuesday 2019-05-28"
      - spinning wheel behavior
      - adjust lower/upper limits using properties or adjusting visual "whiskers" (press L key for lower limit, L key again for upper limit..)
      - motor

    *PRISMATIC
      - see iforce2d tutorial log "Wednesday 2019-05-29"
      - "slider" piston-like behavior
      - adjust limits using properties or visually constrained to the local axis (L key for lower limit, L key again for upper limit)
      - adjust axis (R key 3x)
      - adjust local anchor (T key)
      - motor

    DISTANCE
      - freely rotating bodies about anchors with variable / fixed distance apart, able to create springy "bounce" effect along the length
      - visual adjustment press T (once) to adjust anchor A, T key (2nd time) to adjust anchor B, and T key (3rd time) to adjust the distance length

    ROPE
      - very similar to the DISTANCE joint, but without springy "bounce" effect when reaching desired length
      - distance between bodyA/bodyB is ok when less than the specified length, but can't exceed the length (kinda, except in the beginning of the simulation)
      - visual adjustment same as the DISTANCE joint

    WHEEL
      - basically, a REVOLUTE joint with suspension similar to PRISMATIC
      - visually adust the "suspension" local axis (R key 3x)
      - motor

    WELD (NEW)
      - essentially a "ROTATIONAL SPRING" that attempts to return to it's REFERENCE ANGLE
        - has "frequency" (spring stiffness), oscillation "damping", and a "reference angle" (EDIT 2019-06-08: mass of connected bodies greatly influences the spring effect)

      - a REVOLUTE JOINT with the motor enabled and with a torque imbues rotational friction, but won't snap back to the reference angle like this weld joint
      - info copied over from "Thursday 2019-05-30"

    FRICTION (NEW)
      - very unique type of joint that controls FRICTION for both ROTATION and DISTANCE
      - there are only settings for "max torque", "max force" and maybe "collide connected"
      - usage: ???, maybe simulate object destruction
      - info copied over from "Thursday 2019-05-30"

    MOTOR (NEW)
      - at first glance, this seems very much like the FRICTION JOINT
      - when setting the CORRECTION FACTOR to a non-zero value, however, it behaves as an ELASTIC FORCE that ATTEMPTS TO RETURN TO IT'S INITIAL STATE for DISTANCE and/or ANGLE
      - high/low values for MAX TORQUE / MAX FORCE determine the overall resistance strength
      - higher CORRECTION FACTOR result in a fast-snap elastic force, whereas a lower value results in slower/sluggish elastic force
      - no oscillation upon returning to the initial position
      - usage: ???
      - info copied over from "Thursday 2019-05-30"


v1.3 

  body mass vs fixture density

    - mass shown as a 1st class property of the body, but this is RUBE-specific, not box2d apparently
    - composed of multiple fixtures with different densities, the body mass is calculated from this composite
    * changing the mass of the body will change the densities of the fixtures attached to it in the same proportion

    - while in fixture mode, pressing "D" will show the relative densities of all the fixtures in the current view -- all fixture items in greyscale, but with higher density fixtures visually more solid
      - moving the view around will change the relative density visual presentation accordingly


  BITPLANE
    - a subpanel of PROPERTIES (a little bit hidden)
    - each bitplane can be renamed if necessary
    - apply category/mask to FIXTURES to specify what type of bitplane fixtures can collide
    - category/mask relationships can be quite complex and this panel should make things easier

    - the design panel also shows INSTANT VISUAL FEEDBACK what fixtures it can collide with
      * also, pressing "F" while in fixture-mode and with none of the fixtures selected, allows you to move the mouse over any fixture and instantly shows what it can collide with

    - selecting multiple fixtures tries to show a venn-diagram type of relationship with regards to common category/masks

    NOTE: box2d only supports 16 distinct bitplane category/masks (16-bit); RUBE shows 32, but beyond 16, this has to be managed programmatically outside of box2d


  MISC
    - system hooks (ie. copying .json export to a specific directory/file location)
      - vid actually shows this as a way to load .json RUBE exports directly onto running ios sim without having to recompile


v1.4

  MISC
    - ASPECT SCALE: ratio of image width to height; same can be accomplished with the mouse by select image and pressing "S" + "X"/"Y" + mouse move
    
    - command line interface (ie. quick export .rube files to .json)

    - script updates
      - script event-hooks
      - include other scripts feature similar c++ mechanism

      - script panel "library" of scripts
        - eliminates having to always copy/paste
        - named scripts
        - user-defined tags
        - also a quick way of editing (action menu) custom scripts


v1.5

  SHOW LABELS toolbar icon - this must be depressed to show object labels in the editor view

    - use "tools > options > use dynamic label placement" checkbox option so that labels are not overlapping

    - use "scene settings > custom display > labels" option to create a script that alters label colors, etc.
      - sample script is generated that can be altered; basically a function override


  property label visibility

    - use "scene settings > custom display > property display" option to create a script to controls property item visibility
    - use case example #1: certain properties are irrelevant for static bodies (ie. bullet)
    - use case example #2: custom properties (ie. certain user-defined categories shouldn't be climable - https://youtu.be/K-VzlEtXdJM?t=1018)


  export filters

    - use "scene settings > export options > included properties" to designate an export filter script
    - much more FINE-GRAIN control into what gets exported into RUBE .json


  snap-to-grid

    - additional toolbar item to snap to absolute positions on the fixed grid when using CTRL+ (the default is to snap relative to the start position)


  action items

    * ALIGN VERTICES (this might be useful)
    - split fixtures (ideally split along sub-polygon vertices)
    - join two fixture (a bit tricky http://www.iforce2d.net/forums/viewtopic.php?f=9&t=186 and script had to be updated)
    - refine: smooth line (vertices), remove redundant vertices, bevel corners

  help full-text search
  + online help


v1.6

  "UNDO STACK" is new and part of the window > dockbars
    - kind of cool visual representation of history of actions
    - clicking on any item, immediately returns that document state
    - beats using CTRL+Z multiple times
    - might be slow.. depending on how for in the stack along the stack changes have to be applied

  split fixture (line) NEW - usage https://youtu.be/NHbGtHtccx4?t=360
  split fixture (polygon) - usage https://youtu.be/NHbGtHtccx4?t=320

  view position script - getViewCenter(), setViewCenter(), getViewHeight(), setViewHeight()
    - handy for view bookmarks / event binding

  NEGATIVE SCALING
    - FIXED issues with images, vertex winding, joint limits and motor direction
    - FIXED script scale() issue similarly

  manipulation script demo - template change manipulation applied to similar fixtures
    https://youtu.be/NHbGtHtccx4?t=1321
    - COMMENT: demo shown is valuable info, but couldn't this also be accomplished using object

  before/after export script hook demo
    - flip the world for export useful for javascript/flash..
    https://youtu.be/NHbGtHtccx4?t=1609

  samplers added

    * one useful piece of info is to use the 1-step auto-fixture creation script, but keep the sampler so that the control points that are auto-generated can be re-used and a better fixture can be generated from that

    * regarding the animation frame capture, the actual video going more in-depth into samplers shows off a script to auto capture animation snapshots of a certain number of frames - see: https://youtu.be/O68lFQWe7-A?t=428


v1.7

  measure tool
    - press "M" + move mouse
    - can be split across 2 views

  custom property combo-box export
    - kind of like c++ enums, but 1.7 now adds the ability to export the "enum" names

  ctrl+key vertex snapping (COMMENT: actually surprised this hasn't been a feature all along)
    - editing or adding new vertices


  INSTANTIABLE OBJECTS (https://youtu.be/E3KERZlt7Ak?t=420)

    "RUBE scene within a scene"
  
    - RUBE instance object VS copy/paste from an open RUBE doc

      - RUBE instance object are EXACT INSTANCES OF THE ORIGINAL that maintain the details from the original
        - instance objects cannot be modified directly, only the original can
        - user properties can be added to instance objects, just like bodies, fixtures, etc.

      - copy/paste are completely BRAND NEW versions

    - NESTED instance objects - WORKS
      * AVOID circular references

    * NOTE: instance object joints parameters (and some other relevant values) don't scale well in proportion to the attached bodies' mass (walking mech example; once a mech is scaled, it can't walk anymore - https://youtu.be/E3KERZlt7Ak?t=1327)