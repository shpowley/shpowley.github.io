"Building Android Games with Cocos2D-x"
=======================================

android application configuration

  androidmanifest.xml
  - permissions
    - android.permission.INTERNET not really needed in the beginning
  - orientation
    - android:screenOrientation

  strings.xml
  - app_name - launcher icon text and application identifier

  android.mk
  - LOCAL_SRC_FILES - for adding new classes
  - c++ compiler files
  
  AppDelegate::applicationDidFinishLaunching()
  - first game-specific method
  - game setup + debug mode ON/OFF
    
  init method (scene)
  - instantiation and placement of visual elements
  
  auto director = Director::getInstance();
  - recommended to set as a class attribute for performance & less typing
  
    class Pause : public cocos2d::Layer {
      ..
      private:
        cocos2d::Director* _director;
        cocos2d::Size _visibleSize;
    };

  PAUSE implementation using a new scene (see p.19)
  - unsure how effective this implementation works compared to other methods
  - uses .pushScene() / .popScene()
  
    Director > .replaceScene()
    - replaces the running scene with a new one
    
    Director > .pushScene()
    - suspends the execution of the running scene, pushing it on the stack of suspended scenes. the new scene will be executed.
    - try to avoid big stacks of pushed scenes to reduce memory allocation
    
    Director > .popScene()
    - pops out a scene from the stack
    - this scene will replace the running one - the running scene will be deleted
    - if there are no more scenes in the stack, the execution is terminated
    
  - other "methods":
    - https://discuss.cocos2d-x.org/t/pausing-the-physicsworld/16683/9
    - https://discuss.cocos2d-x.org/t/help-pause-and-resume-game/29359/5
    - https://discuss.cocos2d-x.org/t/how-to-pause-and-resume-my-game/21237

- .setPosition() w/ float parameters up to 10x faster than Vec2 parameters
- coordinate system origin at bottom/left like standard math
- sprite center default anchor is set to CENTER of the sprite

SCENE TRANSITIONS

ACTIONS | SEQUENCES | ANIMATIONS

ANIMATIONS + SPRITE SHEETS (improved performance)

GAME MENUS

Handling multiple screen resolutions (p.30)
- TODO: compare sample code ::applicationDidFinishLaunching() in AppDelegate.cpp to default code generated by cocos2d-x framework
  - note multiple resolution handling
  - note the code handling android state pause/resume
  
PHYSICS
- code sample uses built-in physics engine (based on chipmunk)
  - chipmunk (default physics engine) - built with C
  - box2d - built with C++

- NOTE: sprite->setPhysicsBody()
  - setPhysicsBody() is deprecated
  - cocos2d-x version < v3.9 use setPhysicsBody(), else >= 3.9 use addComponent()
  - https://discuss.cocos2d-x.org/t/addcomponent-vs-setphysicsbody-methods-to-add-a-physics-body-to-a-sprite-node/27490/2
  
- box2d tutorial: https://wizardfu.com/book/cocos2d-x/box2d-physics/

- chipmunk-specific
  - preprocessor directive to execute code only in debug-build
    #if COCOS2D_DEBUG
  
  - show physics bodies (DEBUG MODE)
    scene->getPhysicsWorld()->setDebugDrawMask(PhysicsWorld::DEBUGDRAW_ALL);
    
  - in createScene() function, create the scene w/ Scene::createWithPhysics(); and specify gravity for the world to ZERO. applying velocity directly to bomb sprite/body.
    - setVelocity() is used on physics bodies as opposed to MoveTo() actions on image sprites.
    
  - see journal entry "Wednesday 2018-12-05" for test results and notes
  
USER INPUT
- Event Dispatcher
  - accessed via node "_eventDispatcher" attribute or Director "getEventDispatcher" static method
  
- inputs: touches, keyboard key press, acceleration, and mouse motion

- ch.4 demos Event Dispatcher, Accelerometer, Touch (single touch), keep screen alive (mobile), and the back button (android)

- back button listener should be added to each scene independently

FONTS / LABELS
- createWithTTF - true type fonts

- createWithSystemFont - system font (ie. Arial)
  - book recommends using system fonts for testing only as some fonts might not be available on a given platform
  
- createWithBMFont - bitmap font

- label effects
  * some effects limited to truetype or system fonts
  
  - outline - enableOutline: color + outline width
  - glow - enableGlow: color
  - shadow - enableShadow
  - color - Color4B: RGB + alpha
  
- bitmap fonts
  - more "professional"
  - bitmap font applications (Glyph Designer X, Littera)
  
SCHEDULER
- book uses schedule, but not much info (see p.71)

STORAGE
- UserDefault class
  - grants us access to the Cocos2d-x simple data storage mechanism
  * to persist data, use the flush method
  
AUDIO / SIMPLE AUDIO


PARTICLE EFFECTS
- built-in particle effect classes: ParticleFireworks, ParticleFire, ParticleRain, ParticleSnow, ParticleSmoke, ParticleSpiral, ParticleMeteor, ParticleGalaxy, ParticleExplosion, ParticleSun, ParticleFlower
  - inherits from ParticleSystemQuad < ParticleSystem
  - many, many method / options. a bit overwhelming and not intuitive. a particle system designer might be better for visually designing particle effects
  
- particle system designer
  - export to .plist and load with ParticleSystemQuad class
  - http://www.particle2dx.com/
    - free, web-based, visually understand options, export to cocos2d
  - http://games.v-play.net/particleeditor
    - free, android

JNI
- call android java from c++
  - http://stnguyen.com/cocos2d-x/call-java-functions-from-cpp.html
- call c++ from android
  - http://stnguyen.com/cocos2d-x/call-cpp-functions-from-java.html
- reading JniHelper .h/.cpp source code






