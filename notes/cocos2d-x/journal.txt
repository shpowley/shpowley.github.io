

android-support-v4.jar

Wednesday 2018-12-12

- JNI
  - attempted to implement example from the book to p.118 and some help from "Call Java functions from C++ in cocos2d-x" (http://stnguyen.com/cocos2d-x/call-java-functions-from-cpp.html)
  
  - I didn't have success at first with refactoring ch.8 JNI code as the app kept crashing at the JNI call. I'm not 100% sure what I did to get this working.
    1) the book has a more segmented (convoluted?) approach that wraps the JNI call in another class "JniBridge .h/.cpp"
      - this may be advantageous if there are many JNI calls, but makes for obtuse learning
    2) the website example uses the return value from JniHelper::getStaticMethodInfo() in an IF statement instead of just assuming it returns true and is valid. I incorporated this into the test.
    3) if the last parameter in JniHelper::getStaticMethodInfo() return a void, do not put a ";" semicolon at the end. other data types, however, seems to require a ";" at the end
    4) the last major change was to AppActivity.java, implemementing the getInstance() method with the "instance" variable initialization. the the website example didn't have anything like this, it was required for the JniFacade.java code
    
  * this somewhat confusing, but cocos2d-x includes JniHelper .h/.cpp source code, which wraps many calls to the Android NDK (jni.h) AND use this for additional guidance for code examples in the future as there are many variations of c++ -> Android calls
    *** just calling the JniHelper::callStaticVoid() method directly, saves a lot of duplicate code and is correctly implemented by the cocos2d team

- COCOS2D_DEBUG compiler flag
  - use CCLOG to log debug messages, as it honors the COCOS2D_DEBUG flag
  - for ANDROID.. modify Application.mk line APP_CPPFLAGS += appropriately for NDK_DEBUG, but take care as it increases the compile time
  - I'm not yet sure about the RELEASE build though. by default, is COCOS2D_DEBUG = 0?

----------
Monday 2018-12-10

- finished ch.7 reading particle effects and particle system designers

- acceleration / gyro
  - downloaded pertinent .js files from my phaser.io hula and piggy wiggly projects. just perusing the code, I only appear to be using the linear acceleration calculated from the low-pass filter
  
  - javascript appears to be limited to acceleration+gravity & gyro, but linear acceleration has to be calculated on-the-fly use a low-pass filter calculation I found (I haven't encountered javascript linear acceleration support on any devices I've used so far)
  
  - cocos2d-x only supports acceleration+gravity at the moment
    - I did find this cocos2d-x project on github to access the gyroscope (ios and android)
      https://github.com/Undume/Gyroscope-Cocos2d-x
      
  - google android sensors
    https://developer.android.com/guide/topics/sensors/
    - android has API support for many more sensors and access through JNI might work

----------
Sunday 2018-12-09

- ch.7
  - bombs re-implemented as cocos2d::Vector array
  - particle effects (bomb explosions)
    - ch.7 refactored into test project
    - bomb only explode when touched with finger
    - I found a strange bug, that at first glance, appeared to be the fault of the Audio API. after playing with this a little and even switching to the SimpleAudio, the crashes persisted.
      - the cause seems to revolve around the "bombs" vector array implementation
        - 1) in the contact callback, _sprBomb is being referenced to get the physics body, but this only works with the previous chapters' code as the vector array should now be used. Note: I'm not really sure this code is really even necessary anyway, since a new scene is being loaded right away. I iterate the the bombs array instead and move the new scene load further down..after this fix, it seems to work a bit better and not crashing so often
        - 2) this bug is more subtle, as it only causes crashes "occasionally". I'm not going to try to fix this as it's more involved, but basically touch-exploding bombs stacked too close causes multiple bombs to explode and the vector array gets out of sync somehow. even more strange, is that on rare occasions, touch-exploding a bomb, will cause another bomb to explode much further away (this doesn't make sense), which also cause the bombs vector array to get out of sync. one possible fix is to not allow a single touch to explode more than one bomb at a time.
        - 3) ANOTHER problem is for bombs that aren't exploded and fall off the screen - these are never destroyed and removed from the vector array

- tried playing with c++ Android Studio conditional breakpoint -- THIS DIDN'T WORK. TEST THIS OUT AGAIN ANOTHER TIME
    

- implemented ch.6 code
  - book has code for both SimpleAudio and Audio engines, but SimpleAudio code is never used
  - USE CODE SAMPLE STYLE FROM AppDelegate.cpp, as audio implementation for c++ includes isn't ideal
  - small stutter is noticeable in collision code? PRE-LOAD SOUND FILES
  - NOTE searchPaths.push_back("sounds"); to add easier access to sound files
  - mute button "menu item images" that has 2 distinct visiblity states - mute / unmute
  
  - noticible differences between SimpleAudio and Audio API -- USE BOTH FOR NOW, AS THE NEWER AUDIO ENGINE HAS EXPERIMENTAL IN THE TEXT OF IT'S C++ INCLUDE..
    - new Audio API treats bg sounds and effects the same, whereas SimpleAudio has different methods to deal dependent on the type of sound
    - use AudioEngine::INVALID_AUDIO_ID as a test for unplayed sounds
  
  - shared pre-processor directive across multiple files, specifically USE_AUDIO_ENGINE
    - https://stackoverflow.com/a/2946543
    - implemented a duplicate of pre-processor definition in Ch6Scene.h to eliminate unnecessary code from SimpleAudio, but a shared .h file would be better in the future

  - cocos2D-x template code in AppDelegate.cpp actually places end in destructor -- ALREADY HANDLES AUDIO CLEANUP FOR ENTIRE APPLICATION
    - tested adding overriden onExit() (and destructor) -- not needed for Audio cleanup, but might come in handy??

----------
Saturday 2018-12-08

- read through ch.5, "Handling Text / Fonts", and implemented into my test project.
  - samples for truetype, system, bitmap fonts
  
  - introduces the concept of the simple storage mechanism, UserDefault, but is limited to being a global variable data holder. it actually causes the app to stutter
  
  - introduces the scheduler concept, through "schedule" and CC_SCHEDULE_SELECTOR
    - book doesn't go in-depth, but I added some test code. scheduler is a bit weird..pausing can only be done the "target" scene and ALL child scheduled function, not specific scheduled function.
  
  - introduces .getShapeA / .getShapeB concept in the physics contact handler. at first, I thought this was a code "hack" as it wasn't explained at all. basically the contact handler is triggered by ALL physics objects and we have to test whether or not shape A or shape B is the player "bunny"
    - https://www.raywenderlich.com/1848-cocos2d-x-tutorial-for-beginners (not a great example per se, but shows how to remove colliding nodes)

----------
Friday 2018-12-07

- implemented multi-touch to ch.4 code - it works fairly well, but not perfect. just dragging a finger around the screen causes touch press on multiple objects. probably fixed using additional logic in the on-touch-begin/on-touch-end events

- implemented return to menu on the back button press and back button on main menu

- torque spin after a collision (or contact) is absurdly fast. multiple contacts seem to occur for some reason
  - after some observation and code changes, multiple contact events are triggered if both physics bodies are allowed to stay too close to one another
  - this is compounded (I think) by one object being moved continually by the accelerometer AND the rotation of the other physics body
  - returning true/false is "iffy" as the book states that returning false will not allow the contact event to trigger again. returning false seems to allow the event code to execute correctly, whereas returning true seems to "fail" I guess
  - a boolean flag keeping track of whether this event triggered seems to work if incorporated with this code. return false seems to ALWAYS be best, as return true has an undesirable result. not really sure what's going on though. another option might be to remove the event-binding entirely...

----------
Thursday 2018-12-06

- implemented ch.4 in test code that implements accelerometer, single-touch, back button, and keep screen alive. finished reading through ch.4

----------
Wednesday 2018-12-05

- added and refactored ch.3 code to test project. realized a bit late that test code actually started at ch.2 - so it took a little while to reflect this in the test project

- encountering difficulty with the physics bodies debug outline on 2 devices I own. moto-g (android 5.1) draws debug physics bodies at start, but will not redraw to reflect updated positions. samsung galaxy s3 (android 4.4) will NOT draw debug physics bodies at all. in all cases, actual sprites move and collisions occur.
  - I tried using AVDs also - x86 will not work under chrome os / crouton as a kvm can't be installed. arm-based AVD is very slow to even start and doesn't even run.
  - older chrome os hardware is less than ideal for android development: new computer $$$ (pc/linux, new chrome os/crostini), pure linux on this chromebox, or make due with testing on actual phones
  
- additional tests recommended by the book included applying forces, impulse, linear damping, and torque, but I had some difficulty getting these test functions to work.
  - assigning a mass, using the setMass() function, was the trick to get force / impulse to work properly - not sure of the units.
  - assigning a moment, using the setMoment() function, enabled torque adjustments to work as expected. moment values <= 0 caused the app to crash and too close close to zero acted "haywire". this doesn't seem to be really documented, but moment >= 1.25 seemed to work best
  - setEnabled() & setRotationEnable() function seem unnecessary. perhaps these are enabled by default or enable by the setDynamic() function

- NOTE: ResolutionPolicy::NO_BORDER made everything drawn slightly to the left, almost like it seemed aligned to the right edge. ResolutionPolicy::FIXED_HEIGHT seemed more desireable, aligned center

----------
Tuesday 2018-12-04

- installed android studio plugin for wireless adb

- reviewed ch. 1 source code

----------
Monday 2018-12-03

- reviewed previous notes

----------
Thursday 2018-11-29

- installed android sdk 4.4 to enable testing on another device - samsung galaxy s3. two applications seemed to run fine

- researched some common smartphone device resolutions to determine how they stack up against 1) the default low/mid/high resolutions used by the cocos2d-x framework and 2) the images provided by the book "Building Android Games with Cocos2D-x" ch.1 source code

  - considering the provided images and typical smartphone resolutions, only the low and mid size images really would work - refactoring the code accordingly
  
  - the accelerometer-based "bobble" apps should be highly customized
    - if using a background image, I think using "ResolutionPolicy::NO_BORDER" would be best, because cutting off portions of the background should be ok
    - the actual foreground images and physics objects should somehow be re-sizeable
    
- menu + ch.1 sample is working - return to reading and add chapters as reading progresses

----------
Tuesday 2018-11-27

- attempting to refactor AppDelegate.cpp screen dynamic resolution code automatically generated by cocos2d-x framework to the code from ch.1

  - book ch.1 AppDelegate.cpp > applicationDidFinishLaunching() > glview->setFrameSize(480, 800);
    - this doesn't appear to do anything
    
  - added a scene background color to (hopefully) visually understand impact of code changes
    - https://discuss.cocos2d-x.org/t/change-background-color-of-scene/42858/2 (change scene bg color)
    
  - playing w/ ResolutionPolicy::NO_BORDER to ::SHOW_ALL shows that the default ::NO_BORDER actually cuts off portions of the left and right, while ::SHOW_ALL displays the entire design area, but leaves empty top/bottom black portions. so neither setting is ideal, especially considering the bg image and device resolution do not match.
    - test device resolution (moto-g gen 1) - w: 720, h: 1280
    - ch.1 background image                 - w: 768, h: 1280
    
    - ResolutionPolicy::SHOW_ALL I think would be best in this scenario, but should be modified to something more appropriate going forward. best to match the device, if possible.

----------
Monday 2018-11-26

- decided to create an android application to test out each chapter's code from the book "Building Android Games with Cocos2D-x". this will have a main menu with a menu option to launch each chapter's code
  - this will allow for better understanding of the code being read and see it in action
  - possibly discern coding differences from a more recent version of the cocos2d-x framework
  
- progress: completed skeleton project with selectable menu items (ch.1 - 8)

----------
Saturday 2018-11-24

- took notes on PDF book "Building Android Games with Cocos2D-x"
  - stopped @ ch.3: understanding game physics

----------
Tuesday 2018-11-20

- added an additional "blank" scene to contain physics bodies test
- planning to use built-in physics engine "chipmunk" and if that has problems, I'll try Box2d
  
----------
Sunday 2018-11-18

- modified test project to have a menu select scene & accelerometer xyz measurement scene
  - add additional scenes from the menu select scene

----------
Saturday 2018-11-17

- "simple" test to display accelerometer-x in log and label

- compile warning persists even after trying some fixes searching google
  - "WARNING: ABIs [armeabi-v7a,armeabi] set by 'android.injected.build.abi' gradle flag contained 'ARMEABI' not targeted by this project."
  
----------
Friday 2018-11-16

- migrate notes to Google Drive (easier to access from different environments)
  1) developer daily journal
  2) to do list
  3) cocos2D-x notes
  4) books
  
- optimize template project as much as possible
  - REMEMBER TO UPDATE TEMPLATE W/ VERSION UPDATES

----------
Tuesday 2018-10-09

- "cocos2D-x notes.txt" review
  - NEW PROJECT
    - renamed to HOW TO CREATE A NEW PROJECT
  
  - PRE-BUILT LIBRARIES
    - reviewed instructions
    - TODO item added to streamline creating new projects using PRE-BUILT
    
  - LOGGING - basically use built-in log function
  - RESOLUTION - skipped for now
  
  - SCALING - skipped for now; this seemed important though so adding it to the list of TODO
  
  - https://github.com/chukong / "programmers-guide-samples"
    - failed to compile for Android and as in previous attempts, without success
    - perhaps create a new base project and add code / resources TODO
    
  - NEXT: continue looking at web links

----------
Sunday 2018-10-07

- verified cocos2d-x still at version 3.17

- it's been a while since I played with this code. plan is about ~2 hours / day for now.

- continued with "my_tests" project
  - modified some label text in Scene2.cpp and tested on my phone (compile time: 11m 15s)
  - 2nd label alteration and test (compile time: 1m 2s)
  DEFINITELY USE PRE-BUILT LIBRARIES - MAKE EASIER FOR NEW PROJECTS
  
- "cocos2D-x notes.txt" review
  - NEW SCENE
    - copy from template needs elaboration or maybe an actual template TODO
    
    - while looking over this, it was SOMEWHAT DIFFICULT TO LOCATE THE FILES referenced in the "LOCAL_SRC_FILES :=" section of Android.mk. I made this to locate these easier in the future. This is easier in an actual file manager directory tree, but one can also right-click the file or open tab and select "Show in File Manager".
    
      - "Project" tree view (a little easier to navigate)
        - /hellocpp/main.cpp ==> ROOT > (project) > app > jni > hellocpp
        - Android.mk/Application.mk => ROOT > (project) > app > jni
        - user .cpp/.h files ==> ROOT > (project) > Classes
    
      - "Android" tree view
        - Android.mk/Application.mk => ROOT > "External Build Files"
        + Android.mk/Application.mk => ROOT > (project) > cpp > MyGame > (project) > proj.android > app > jni
        - /hellocpp/main.cpp ==> ROOT > (project) > cpp > MyGame > (project) > proj.android > app > jni > hellocpp
        - user .cpp/.h files ==> ROOT > (project) > cpp > MyGame > (project) > Classes
  
<!--stackedit_data:
eyJoaXN0b3J5IjpbLTI5MTQxMjk5Ml19
-->