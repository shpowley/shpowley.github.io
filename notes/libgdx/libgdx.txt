TRAINING

  UDACITY: 2D GAME DEVELOPMENT WITH LIBGDX (FREE)
    https://classroom.udacity.com/courses/ud405

    github course content: https://github.com/udacity/ud405

    starfield
      - shapeRenderer .dot()

    connect the dots
      - shapeRenderer .polyline()
      
      dot generator
        - bonus project used to actually create the dots, libgdx "InputProcessor", desktop only, R (reset), L (log)

    CAMERA viewport demo
      - 2 cameras: overview + controllable
        - overview camera contains outline of controllable
        - controllable can actually zoom out and pan past the overview

      * THIS MIGHT COME IN VERY HANDY
        - code is a bit more involved (NOT EXPLAINED), but still manageable

      COMMANDS
        arrow keys: move controllable
        space: switch between overview / controllable cameras
        z: zoom in controllable
        x: zoom out controllable
        w/s: controllable height
        a/d: controllable width
        f: reset controllable height/width aspect
        q/e: controllable rotation

    solar system demo
      - first explanations of CAMERA
      - note .resize() handles android screen rotations, desktop screen window size adjustments

    viewport demo
      - intro to different types of camera viewports
      - interesting, but would this be used to accomplish something similar to the "camera viewport demo"
        - comment: world w/h + camera.translate() + viewport.update(..., false)?

    smiley face exercise
      - combines renderer, shapes, colors, viewport + viewport positioning

    text demo
      - bitmap font intro, sprite texture filtering

    word cloud exercise
      - bitmap font color, size..

    circular motion
      - introduces elapsed time using TimeUtils.nanoTime()
      - circle rotation + fancy circle pattern (I'm not sure how this is done)
      - equations from https://www.mathopenref.com/coordparamcircle.html

    reciprocating motion exercise
      - similar to circular motion demo, but just the x-motion component and minus the fancy circles

    games and screens demo
      - introduces game and screen concepts ...Gdx.graphics (fps, delta time usage)
      - switching 2 screens: fps, interval

    screen saver exercise
      - sub-component render (used previously also)
      - small use of input processor

    input testbed
      - working demo template of a single bouncing ball that slows down due to drag/friction and get new kicks to propel it after a short delay
      - game "template" gets more refined
      - introduces "ScreenAdapter", .setAutoShapeType()
      * .dispose() method still gets used.. I thought the recommendation was to use the .hide() method, but maybe this is only necessary if there's multiple screens

    polling demo
      - continue previous ball "input testbed" by adding KEYBOARD POLLING
      - "Z" grows ball, "X" shrinks ball

    polling exercise
      - build on "polling demo" by adding UP/DOWN/LEFT/RIGHT + max velocity clamp

    input adapter demo (input event)
      - builds on "polling exercise
      - extend InputAdapter class
        - override keyDown() to create the ball "kick"
      - register new InputProcessor with libGDX
      - note that Z X UP DOWN LEFT RIGHT still work using the polling method

    reset ball game state exercise

    demo flick
      - control ball "kick" direction + velocity with "flicks"
      * note that this code isn't really a "flick" as the resulting code/execution is solely based on the direction/distance of beginning and end touches (THIS IS MORE LIKE A "SLINGSHOT" THAT CAN BE AIMED)
      
    follow the finger
      - building on "demo flick" to move the ball to the finger/mouse position

      NOTES:
        - I got the incorrect on some portions using Vec2 .set() and Vec2 initialization
        - the MAIN LESSON TO TRY AVOIDING UNNECESSARY VEC2 creation/method calls whenever possible
        - viewport .project()/.unproject for example only deal with Vec2/Vec3 -- REQUIRED HERE
        - object overhead for storing x/y/z coordinates -- USE PURE FLOAT VARIABLES
        - also, avoid Vec methods unless necessary.. hides inner workings + extra calls
        - .touch methods could be more efficient by not creating new Vector2() objects each call

    accelerometer input demo
      - biggest take-away is that this demo uses 2 viewports, 1 for graphics (FitViewport) and 1 for text (ScreenViewport)

    bubble level exercise
      - not 100%, but accelerometer axis readings may be skewed by 90 degrees because of landscape game orientation ..so x/y axis reading are swapped
      - also, once swapped, the new vertical y-axis readings are inverted

    accelerometer movement exercise
      - builds on "follow the finger" code adding accelerometer x/y as an additional mechanism to control ball
      - not really sure of the reasoning for the ball acceleration logic..

    CREATE THE ICICLES PROJECT
      - use the libGDX java setup program
      - ending up using the android studio JRE (took a while to find it though)
        - had to set the JAVA_HOME environment variable and add it to the windows PATH

      - open project directly in android studio -- IMPORT not specifically required
      - update gradle plugin to the latest stable -- THIS WORKED unlike the existing UDEMY project files

    icicles
      - avoid falling icicles using keyboard or accelerometer controls
      - DelayedRemovalArray for icicles falling
      - collision detection

      - HUD for score, death count
        - the font resize code example it unique compared to previous examples

      - difficulty setting
        - java enum


  UDACITY: HOW TO MAKE A PLATFORMER USING LIBGDX (FREE)
    https://classroom.udacity.com/courses/ud406

    logging

    "punchline"
      file loading, decrypt text

    texture drawing
      centering logo

    filtering types demo
      nearest neighbor: https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation
      linear interpolation: https://en.wikipedia.org/wiki/Bilinear_filtering

    nine-patch
      show visual difference nine-patch vs texture "sprite" draw
      both my solution and actual are similar, but SEE SOLUTION CODE FOR BETTER ALIGNMENT MATH

      libgdx: https://libgdx.badlogicgames.com/ci/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/NinePatch.html
      android: https://developer.android.com/reference/android/graphics/NinePatch.html

    animation
      animation class
      too much done for me here without enough explanation; textureregions, explosions (particle effect?)

    texture packer (creating a texture atlas)
      uses gradle to create texture atlas (not sure of the logistics from a high-level OR how the .atlas file is created)
      example is literally copy/paste from solution -- I couldn't figure this out on my own
      * interesting in that texture packer is not the texturepacker product (see https://www.codeandweb.com/texturepacker/tutorials/libgdx-physics)
      the libgdx texture packer has it's own UI too

    project skeleton
      literally copy/paste, but a GOOD PLACE TO START

    asset loading
      gradle-specific TODO items for creating a texture atlas with libgdx texture packer
      asset singleton example

    draw gigagal
      from libgdx docs:
        originX - the x-coordinate of the scaling and rotation origin relative to the screen space coordinates
        originY - the y-coordinate of the scaling and rotation origin relative to the screen space coordinates

        - I'm not sure about the math logistics for this code example, tried overlaying a circle but still

      from the circle attempt, renderer batch cannot be nested in sprite batch

    left/right movement
      keyboard check

    facing direction
      enum (see icicles final game, defined in constants)

    jumping  
      handles jumping logic.
      * to be honest, I'm not sure how I would have approached the jumping beyond the jump enum state.
      * BASED ON MY EXPERIENCE TESTING RUBE/BOX2D, I WOULD PROBABLY TRY USING THAT
      my attempt I forgot to convert long nanosec to float with MathUtils.nanoToSec, also forgot to use the delta in position.mulAdd(velocity, delta);

    jumping sprites
      additional state sprites

    walk state
      additional state sprites

    walk loop
      used 2.1.07 animation code sample (previous class) as a reference
        - proper object types, syntax, correct frame
      actual solution added a repeated middle keyframe at the beginning of each animation sequence

    basic platforms
      render basic platform(s) using simple rect shape

    nine-patch platforms
      used nine-patch demo code as a reference

    collision checking
      logic to check if gigagal sprite lands on a test platform
      lots of range checking I didn't get quite right in the exercise

    debug platforms

    chase camera
      camera follows main character
      this was fairly easy as the camera position just needs to match the character position

    remove floor

    kill plane
      respawn when falling too far
      * REMEMBER TO USE "Vector2.set()" not "="

    more platforms
      numerous platforms extend off screen

    debug camera controls
      more camera options: toggle free move / follow
      * my version the SPACE toggle acted intermittently using if/else if for cam movement; switched to multi-if like the solution fixed this.. not an issue, but a better visual cue or log message could help diagnose this

    enemy sprites
      util.drawtexture() for enemy sprite

    enemy class
      DelayedRemovalArray

    on patrol
      enemy move left/right to the platform ends

    bouncy anti-gravity
      cyclic math sin() for bounce

    rectangles colliding w/ circles
      *NOTE: shaperenderer to draw shape outline; USEFUL FOR DEBUGGING; I forgot this from earlier lessons

      aside challenge
      my solution only handles rectangle corners (could also add circle left/right/top/bottom extremes easily)..but incomplete either way
      their solution works, but looks ugly..?
      rectangles rotated 45 - could their solution detect collision?

    enemy collision
      rectangle shapes used to define bounds greatly simplifies collision code
      my solution accidentally used .contains() -- .overlap() works much better

    knockback
    
    knockback (additional effects)
      additional movement state
      fixes sliding on platform after knockback

    2.6.1 bullets, video 61


  OTHER TRAINING

    3d and libgdx
      https://xoppa.github.io
      https://xoppa.github.io/blog/basic-3d-using-libgdx/

    youtube / foreignguymike
      https://www.youtube.com/c/ForeignGuyMike/featured

    youtube / brent aureli
      https://www.youtube.com/c/BrentAurelisCodeSchool/featured

    youtube / dermetfan
      https://www.youtube.com/c/dermetfan/featured

    libgdx.com getting started
      https://libgdx.com/

    libgdx (official??) > getting started
      https://libgdx.badlogicgames.com/index.html

    libgdx wiki *** MAKE SURE TO READ THROUGH ***
      https://github.com/libgdx/libgdx/wiki

    live wallpaper
      https://molotuspi.blogspot.com/2013/09/how-to-make-simple-android-live.html

    overlap2d
      open-source visual editor
      https://www.youtube.com/channel/UC8dKKDwzXTNSIWkB3q166pg/videos
      https://github.com/UnderwaterApps/overlap2d


NEW PROJECT

  https://github.com/libgdx/libgdx/wiki/Project-Setup-Gradle

  get the latest libgdx setup

  command line:
    java -jar gdx-set.jar

  make sure to specify a new directory for the project

  updating to latest gradle should be ok on new projects


GLTF

  https://github.com/mgsx-dev/gdx-gltf


MISC

  LibGDX javadocs - VERY USEFUL
  ApplicationListener vs ApplicationAdapter
  Gdx.app.log()


DOCUMENTATION + JAVADOCS

  https://libgdx.com/dev/

  
ANDROID STUDIO RUN CONFIGURATIONS

  from the android terminal:

    linux/mac:
      $ ./gradlew desktop:run

    windows:
      $ gradlew desktop:run

    * use CTRL+ENTER to get correct IDE environment variables
      - this also creates a "template" run configuration that can literally be copied, modified, or re-used as-is


  run configurations:

    - accessible only via the toolbar
    - default run config is android
    - for desktop (and other types), make sure to fill out the lines for GRADLE PROJECT and TYPE


LOGGING

  use TAG = <name of main class>.class.getName(); for logging purposes

  log info, errors
    Gdx.app.setLogLevel()
    Gdx.app.error(TAG, <message>, throwable) // throwable?
    Gdx.app.log(TAG, <message>)
    Gdx.app.debug(TAG, <message>)


OS PLATFORM SPECIFIC CODE?

  Gdx.app.getType()


FILES

  Gdx.files.internal(<file name)  // defaults to file located in android/assets


DRAWING

  Gdx.graphics

  - in general, use Gdx.gl ~ Gdx.gl20
  - don't use Gdx.gl30 unless needed & check with Gdx.graphics.isGL30Available()


  SHAPE RENDERER (shapeRenderer CLASS)

    - BATCH draw commands to graphics
    - START/STOP BATCH draw commands when switching between filled/outline modes
    - shapes stack with last drawn on top

    * overloaded draw() methods; the following will scale the texture to the largest side and maintain aspect ratio defined by the type of viewport
    
        public void draw(Texture texture,
          float x,
          float y,
          float width,
          float height)


    NOTEABLE METHODS

      .setColor()
      .line()
      .polyline()
      .rect() : many overloaded versions, vertex colors, rotated rectangles
      .rectline() : thick lines
      .circle()
      .arc()


  NINE-PATCH
    - "stretchable" graphic for dialog/platform/buttons/windows
    - only the 4 corners maintain size


ANIMATION

  study sample code..


CAMERA

  OrthographicCamera CLASS
    - based on Camera CLASS

    orthographic - 2-dimensional projection of 3-dimensional objects and world


  VIEWPORT
    - helps control camera aspect ratio

    - note viewport "world" vs "screen" terminology (I think..)
      - "world" refers to virtual viewport coordinates
      - "screen" refers to actual pixel


    pre-made viewport sub-classes
    
      StretchViewport
        - WORLD IS SCALED to take the whole screen, but DOESN'T RESPECT ASPECT RATIO

      FillViewport 
        - world fill the screen, maintaining aspect ratio, but bits of the WORLD MAY BE CLIPPED

      FitViewport 
        - world fills the screen, maintaining aspect ratio, but ADDS BLACK BARS (LETTERBOXING) for the remaining space
        - good choice but may look bad on certain devices

      ExtendViewport
        - short axis of the world fills the screen, maintaining aspect ratio
        - almost always the best choice

      ScreenViewport
        - world size is based on the size of the screen, pixel-per-pixel (ratio can be changed)


TEXT

  BITMAPFONT

    - requires SpriteBatch
    - SEE UDACITY CODE 1.6.8 Accelerometer Input Demo  OR  1.8.2 Add the HUD
    
    - default origin is TOP-LEFT for positioning the text .draw()

    - for alternate origin-alignment use overloaded draw()
        draw(batch, string, x, y, targetWidth (= 0?), halign, wrap)

        - targetWidth? seems to shift position in opposite direction of alignment..
        - halign = Align.topRight | right | etc.
    

    SCALING 

      .getData().setScale()

      - SEE UDACITY CODE 1.5.5 FPS Counter  OR  1.8.2 Add the HUD
      - precise scale sizing is a bit hit-or-miss and varies depending on the world size


    VERTICAL ALIGNMENT

      - these examples are probably over-simplified from UDACITY 1.8.4 exercise vs. solution
      - the half-heights are used to offset the draw y-position

        final GlyphLayout easyLayout = new GlyphLayout(font, Constants.EASY_LABEL);
        easyLayout.height..

          OR

        font.getCapHeight()..


TIMEUTILS / FRAME RATE

  TimeUtils.millis()
  TimeUtils.nanoTime()

  - .nanoTime() is typically used for elapsed time from application start


SCREEN

  - create/dispose of objects using .hide()/.show() methods instead of .dispose() due to multiple game screens..


  SWITCHING SCREENS

    - needs instance of class with Game > game.setScreen(<TARGET SCREEN>)
    - see UDACITY CODE 1.5.3 Games and Screens  OR  1.8.4 Icicles + Difficulty Screens


INPUT

  POLLING

    - test for individual keys
      
      .update() > Gdx.input.isKeyPressed(Keys.<KEY OF INTEREST>)


  EVENTS

    - extend InputAdapter class + override appropriate EVENT (ie. keyUp(), mouseMoved(), etc.)
    - also make sure to register new InputProcessor with libGDX
      
      ie. Gdx.input.setInputProcessor(ball);


  TOUCH

    - supports multi-touch
    - part of the InputAdapter class
    - viewport.unproject() is needed to handle SCREEN TOUCHES -> VIEWPORT COORDINATES


  SENSORS

    Gdx.input

    - built-in: accelerometer, gyroscope, compass
    - buffered data?
    - actual code implementation appears hidden
    * application/game orientation may affect swapping of final x/y axes
    * some axis reading may need to be inverted 


DELAYEDREMOVALARRAY

  - allows queued removal of array elements during iteration


IMMERSIVE MODE

  go to:
    android/src/YOUR/PACKAGE/PATH/android/AndroidLauncher.java
  
  add this line:
    config.useImmersiveMode = true;


LOADING A MODEL / FBX-CONV

  convert .obj .dae .fbx to libgdx runtime-friendly .g3dj or .g3db formats
  NOTE: there are model limitions as elaborated in the wiki, with the most noticeable one being 32768 max vertices

  ex. fbx-conv.exe -v ship.obj ship.g3db

  useful blender to libgx tips? http://disq.us/p/wt5asi