----------
Tuesday 2020-03-16

  JAVA MASTERCLASS (continued)

    final, static

      - final variables can actually be modified, but only once in the constructor
      - marking a class as "final" prevents sub-classing
      - marking class methods "final" prevents them from being overridden
      - static initializer ("static" constructor); rarely used, but only executes first time object in the class is instanced; rarely used and syntax is different than most ("static {}" code block)
        - static final variables can be modified in the static initializer


    packages

      - generate "artifact / .jar file" library to import into new project as an external library


    interfaces, inner classes, anonymous classes, abstract classes, generics

      - discussion @abstract (4:48) lecture mentions allowing FLEXIBLE INTERFACES using more generic "List" vs. more constrained type

      - generics (~c++ templates) can be restricted to specific abstract classes (BOUNDED TYPE PARAMETERS)
        + generics comparable demoed; allows use with Collections.sort

----------
Sunday 2020-03-15

  JAVA MASTERCLASS (continued)

    ArrayList, autoboxing

----------
Friday 2020-03-13

  JAVA MASTERCLASS (continued)

----------
Thursday 2020-03-12
  

  JAVA MASTERCLASS


    USER INPUT
    
      Scanner scanner = new Scanner(System.in);

      NOTES:
        - use <Scanner instance>.nextLine() to avoid reading keyboard input infinite loops
        - use <Scanner instance>.close() when created within a method - recommended(?) Scanner instance as a static variable


    CLASSES

      * when a constructors calls an overloaded version -- RULE: THIS MUST BE THE VERY FIRST LINE
      
      * RECOMMENDATION: don't use getters/setters in the constructor


        INHERITANCE

        * RECOMMENDATION: try not to use "super." prefix when using base class methods
          - inherited class method is called by default if it's NOT overridden/implemented
          - see project masterclass\Classes, class Dog, method run() for an example


        COMPOSITION / ENCAPSULATION / POLYMORPHISM
        

----------
Tuesday 2020-03-10

  JAVA MASTERCLASS

    - diff tools - just to show concept

    - coding exercises + online verification

    - intellij idea IDE has useful code shortcuts:
      "sout" => expands to System.out.println()
      "psvr" => expands to public static void main(String[] args) {}


----------
Sunday 2020-03-07

  JAVA MASTERCLASS

    - literal suffixes exist for long(l or L), float (f) and double (d)

    - suffixes for other primitives don't exist
      - must use explicit cast (ie. byte my_var = (byte) 128)


    float (single precision) and double (double precision)
      - double is preferred
      - when more precision is required (ie. currency calculations), java BigDecimal class is recommended


    char and boolean
      - char is a single character
      - char is 16-bits because of unicode
      - unicode-table.com shows char unicode equivalents


    String "class" data type
      - Java treats Strings in a "special" way
      - immutable, so appending to existing strings, etc. is inefficient
      - StringBuffer fixes this, but more later..



----------
Friday 2020-03-05

  - udemy java programming masterclass
    - setup jdk (amazon corretto) + ide (intellij idea community edition)


    JAVA PRIMITIVE DATA TYPES
      boolean, byte, char, short, int, long, float, double